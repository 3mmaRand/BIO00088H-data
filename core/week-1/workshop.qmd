---
title: "Workshop"
subtitle: "Organising Reproducible Data Analyses"
author: "Emma Rand"
toc: true
toc-depth: 4
toc-location: right
execute:
  echo: true
  include: true
  error: true
bibliography: ../../references.bib
editor: 
  markdown: 
    wrap: 72
---

# Introduction

## Session overview

In this workshop we will discuss why reproducibility matters and how to organise your work to make it reproducible. We will cover:

# Reproducibility

## What is reproducibility?

-   **Reproducible: Same data + same analysis = identical results**.
    *"... obtaining consistent results using the same input data;
    computational steps, methods, and code; and conditions of analysis.
    This definition is synonymous with"computational reproducibility"*
    [@nationalacademiesofsciences2019]

-   Replicable: Different data + same analysis = qualitatively similar
    results. The work is not dependent on the specificities of the data.

-   Robust: Same data + different analysis = qualitatively similar or
    identical results. The work is not dependent on the specificities of
    the analysis.

-   Generalisable: Different data + different analysis = qualitatively
    similar results and same conclusions. The findings can be
    generalised

[![The Turing Way's definitions of reproducible
research](images/reproducible-matrix.jpg){fig-alt="Two by Two cell matrix. Columns are Data, either same or different. Rows are Analysis either same or different. Each of cells contain one of the definitions for reproducibility"}](https://the-turing-way.netlify.app/reproducible-research/overview/overview-definitions#rr-overview-definitions)

## Why does it matter?


![futureself, CC-BY-NC, by Julen Colomb](images/future_you.png){fig-alt="Person working at a computer with an offstage person asking 'How is the analysis going?' The person at the computer replies 'Can't understand the date...and the data collector does not answer my emails or calls' Person offstage: 'That's terrible! So cruel! Who did collect the data? I will sack them!' Person at the computer: 'um...I did, 3 years ago.'"}


-   Five selfish reasons to work reproducibly. Alternatively, see the
    very entertaining [talk](https://youtu.be/yVT07Sukv9Q)

-   Many high profile cases of work which did not reproduce e.g. Anil
    Potti unravelled by Baggerly and Coombes @baggerly2009

-   **Will** become standard in Science and publishing e.g OECD Global
    Science Forum Building digital workforce capacity and skills for
    data-intensive science @oecdglobalscienceforum2020

## How to achieve reproducibility

-   Scripting

-   Organisation: Project-oriented workflows with file and folder
    structure, naming things

-   Documentation: Readme files, code comments, metadata, version
    control

# Scripting

## Rationale for scripting?

-   Science is the generation of ideas, designing work to test them and
    reporting the results.

-   We ensure laboratory and field work is replicable, robust and
    generalisable by planning and recording in lab books and using
    standard protocols. Repeating results is still hard.

-   Workflows for computational projects, and the data analysis and
    reporting of other work can, and should, be 100% reproducible!

-   Scripting is the way to achieve this.

# Organisation

## Project-oriented workflow

-   use folders to organise your work

-   you are aiming for structured, systematic and repeatable.

Example

```         
-- liver_transcriptome/
   |__data
      |__raw/
      |__processed/
   |__images/
   |__R/
   |__reports/
   |__figures/
```

## Naming things

![](images/xkcd-comic-file-names.png)

![documents, CC-BY-NC, https://xkcd.com/1459/](images/xkcd-comic-file-names.png){fig-alt="A comic figure is looking over the shoulder of another and is shocked by a list of files with names like 'Untitled 138 copy.docx' and 'Untitled 243.doc'. Caption: 'Protip: Never look in someone else's documents folder'"}

Guiding principle - names of files and directories should be systematic
and readable by humans and machines. Have a convention!

I suggest - no spaces in names 
-   use snake_case or kebab-case rather than CamelCase or dot.case
-   use all lower case except very occasionally where convention is
otherwise, e.g., README, LICENSE 
-   ordering: use left-padded numbers
e.g., 01, 02....99 or 001, 002....999 
-   dates [ISO
8601](https://en.wikipedia.org/wiki/ISO_8601) format: 2020-10-16
-   write down your conventions

```         
-- liver_transcriptome/
   |__data
      |__raw/
         |__2022-03-21_donor_1.csv
         |__2022-03-21_donor_2.csv
         |__2022-03-21_donor_3.csv
         |__2022-05-14_donor_1.csv
         |__2022-05-14_donor_2.csv
         |__2022-05-14_donor_3.csv
      |__processed/
   |__images/
   |__code/
      |__functions/
         |__summarise.R
         |__normalise.R
         |__theme_volcano.R
      |__01_data_processing.py
      |__02_exploratory.R
      |__03_modelling.R
      |__04_figures.R
   |__reports/
      |__01_report.qmd
      |__02_supplementary.qmd
   |__figures/
      |__01_volcano_donor_1_vs_donor_2.eps
      |__02_volcano_donor_1_vs_donor_3.eps
```

# Documentation

## Readme files

READMEs are a form of documentation which have been widely used for a
long time. They contain all the information about the other files in a
directory. They can be extensive but need not be. Concise is good.
Bullet points are good

-   Give a project description, brief

-   Outline the folder structure

-   Give software requirements: programs and versions used or required.
    There are packages that give session information in R @sessioninfo
    and Python @ostblomjoel2019

    ```{r}
    #| eval: false
    sessioninfo::session_info()
    ```

    ```{python}
    #| eval: false
    import session_info
    session_info.show()

    ```

-   Instructions run the code, build reports, and reproduce the figures
    etc

-   Where to find the data, outputs

-   Any other information that needed to understand and recreate the
    work


```
-- liver_transcriptome/
   |__data
      |__raw/
         |__2022-03-21_donor_1.csv
         |__2022-03-21_donor_2.csv
         |__2022-03-21_donor_3.csv
         |__2022-05-14_donor_1.csv
         |__2022-05-14_donor_2.csv
         |__2022-05-14_donor_3.csv
      |__processed/
   |__images/
   |__code/
      |__functions/
         |__summarise.R
         |__normalise.R
         |__theme_volcano.R
      |__01_data_processing.py
      |__02_exploratory.R
      |__03_modelling.R
      |__04_figures.R
   |__README.md
   |__reports/
      |__01_report.qmd
      |__02_supplementary.qmd
   |__figures/
      |__01_volcano_donor_1_vs_donor_2.eps
      |__02_volcano_donor_1_vs_donor_3.eps
```


## Code comments

-   Comments are notes in the code which are not executed. They are
    ignored by the computer but are read by humans. They are used to
    explain what the code is doing and why. They are also used to
    temporarily remove code from execution.

# Github co-pilot demo


# Useful exercises

## Want github co-pilot?
ðŸŽ¬  Create a [GitHub account](https://github.com/)

ðŸŽ¬  Apply for [student benefits](https://education.github.com/discount_requests/application)




You're finished!

# ðŸ¥³ Well Done! ðŸŽ‰

# Independent study following the workshop

[Consolidate](study_after_workshop.qmd)


Pages made with R [@R-core], Quarto [@allaire2022], `knitr` [@knitr],
`kableExtra` [@kableExtra]

# References
