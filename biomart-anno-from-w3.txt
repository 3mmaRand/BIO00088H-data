## Add gene information from Ensembl using biomaRt

[Ensembl](https://www.ensembl.org/index.html) [@martin2023;
@birney2004]is a bioinformatics project to organise all the biological
information around the sequences of large genomes. The are a large
number of databases but [BioMart](https://www.ensembl.org/info/data/biomart/index.html)
[@smedley2009] provides a consistent interface to the material. There
are web-based tools to use these but the R package **`biomaRt`**
[@biomaRt] gives you programmatic access making it easier to integrate information into R dataframes

🎬 Load the **`biomaRt`** [@biomaRt] package:

```{r}
library(biomaRt)
```

🎬 Connect to the mouse database and see the first 20 bits of information we can retrieve:
```{r}
# Connect to the mouse database
ensembl <- useMart(biomart = "ensembl", 
                   dataset = "mmusculus_gene_ensembl")

# See what information we can retrieve
listAttributes(mart = ensembl) |> head(20)

```

There are many (2,985!) possible bits of information (attributes) that can be obtained. You can replace `head(20)` with `View()` to see them all.

We use the `getBM()` function to retrieve information from the database. The `filters` argument is used to specified what kind of identifier we are supplying to retrieve information. The `attributes` argument is used to select the information we want to retrieve. The `values` argument is used to specify the identifiers. The mart argument is used to specify the connection we created.

🎬 Get the gene information:
```{r}
gene_info <- getBM(filters = "ensembl_gene_id",
                   attributes = c("ensembl_gene_id",
                                  "external_gene_name",
                                  "description"),
                   values = prog_hspc_results$ensembl_gene_id,
                   mart = ensembl)
```

We are getting the gene name and and a description. We also need to get the id because we will use that to merge the `gene_info` dataframe with the `prog_hspc_results` dataframe. Notice the dataframe returned only has 279 rows - one of the ids does not have information.

🎬 We can find which is missing with:

```{r}
#| error: true
prog_hspc_results |> select(ensembl_gene_id) |> 
  filter(!ensembl_gene_id %in% gene_info$ensembl_gene_id)

```

Oh, **`conflicted`** has flagged a conflict for us.

🎬 Take the appropriate action to resolve the conflict:


```{r}
#| include: false
#---CODING ANSWER---
prog_hspc_results |> dplyr::select(ensembl_gene_id) |> 
  filter(!ensembl_gene_id %in% gene_info$ensembl_gene_id)
```
❓ What is the id which is missing information?

<!-- #---THINKING ANSWER--- -->
<!-- ENSMUSG00000029386	 -->


We might want to look that up - but let's worry about it later if
it turns out to be something important.

🎬 Merge the gene information with the results:

```{r}
prog_hspc_results <- prog_hspc_results |> 
  left_join(gene_info, by = "ensembl_gene_id")
```

I recommend viewing the dataframe to see the new columns.
We now have dataframe with all the info we need, normalised counts,
log~2~ normalised counts, statistical comparisons with fold changes and p
values, information about the gene other than just the id
