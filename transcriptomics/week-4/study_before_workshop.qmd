---
title: "Independent Study to prepare for workshop"
subtitle: "Transcriptomics 2: Statistical Analysis"
author: "Emma Rand"
format: 
  revealjs:
    footer: "üîó [About Transcriptomics 2: Statistical Analysis](https://3mmarand.github.io/BIO00088H-data/transcriptomics/week-4/overview.html)"
    slide-number: true
    chalkboard: true
    code-link: true
    code-line-numbers: false
bibliography: ../../references.bib
editor: 
  markdown: 
    wrap: 72
---

## Overview

In these slides we will:

::: incremental
-   Check where you are following week 3

-   learn some concepts in differential expression

    -   log~2~ fold changes
    -   Multiple correction
    -   normalisation
    -   statistical model

-   Find out what packages we will use
:::

# Where should you be?

## What we did in Transcriptomics 1: üëã Hello data!

::: incremental
::: {style="font-size: 90%;"}
-   Discovered how many rows and columns we had in our datasets and what
    these were.
-   Examined the distribution of values
    -   across the whole dataset
    -   across the samples/cells (i.e., averaged over genes)
        to see variation between samples/cells
    -   across the genes (i.e., averaged over samples/cells)
        to see variation between genes
-   Filtered data for quality control and wrote to file (except üê≠)
:::
:::

## Where should you be?

After the [Transcriptomics 1: üëã Hello data! Workshop](../week-3/workshop.html)
including:

-   [ü§ó Look after future
    you!](../week-3/workshop.html#look-after-future-you) and

-   the [Independent Study to
    consolidate](../week-3/study_after_workshop.html), you should have:

## üê∏ Frog development


-   An RStudio Project called `frogs-88H` which contains:
    -   Raw data: `xlaevis_counts_S14.csv`, `xlaevis_counts_S20.csv`,
        `xlaevis_counts_S30.csv` 
    -   Processed data: `s30_filtered.csv`, `s20_filtered.csv`)
    -   Two scripts: `cont-fgf-s30.R`, `cont-fgf-s20.R`

Files should be organised into folders. Code should well commented and
easy to read.

## üéÑ *Arabidopsis*

-   An RStudio Project called `arab-88H` which contains:
    -   Raw data: `arabidopsis-wild.csv`,`arabidopsis-spl7.csv`, 
    -   Processed data: `wild_filtered.csv`,  `spl7_filtered.csv`)
    -   Two scripts: `suff-def-wild.R`, `suff-def-spl7.R`



## üíâ *Leishmania* 


## üê≠ Stem cells

-   An RStudio Project called `mice-88H` which contains
    -   Raw data (hspc, prog, lthsc)
    -   Processed data (`hspc_summary_gene.csv`,
        `hspc_summary_samp.csv`, `prog_summary_gene.csv`,
        `prog_summary_samp.csv`)
-   One script called `hspc-prog.R`

Files should be organised into folders. Code should well commented and
easy to read.


## If you do not have those

Go through:

-   [Transcriptomics 1: üëã Hello data! Workshop](../week-3/workshop.html)
    including:

-   [ü§ó Look after future
    you!](../week-3/workshop.html#look-after-future-you) and

-   the [Independent Study to
    consolidate](../week-3/study_after_workshop.html)

# Differential expression

## Differential expression

::: incremental
-   The goal of differential expression is to test whether there is a
    significant difference in gene expression between groups.

-   A large number of computational methods have been developed for
    differential expression analysis

-   R is the leading language for differential expression analysis
:::

## Differential expression

::: incremental
-   the statistical concepts are very similar to those you have already
    encountered in stages 1 and 2

-   you are essentially doing paired- or independent-samples tests

-   but you are doing a lot of them! One for every gene

-   data need normalisation before comparison
:::

## Statistical concepts

Like familiar tests:

::: incremental
-   the type of test (the function) you use depends on the type of data
    you have and the type of assumptions you want to make

-   the tests work by comparing the variation between groups to the
    variation within groups.

-   you will get: the difference between groups, a test statistic, and a
    *p*-value

-   you also get an **adjusted *p*-value** which is the 'correction' for
    multiple testing
:::

## The difference between groups

::: incremental
-   The difference between groups is given as the log~2~ fold change in
    expression between groups

-   A fold change is the expression in one group divided by the
    expression in the other group

-   we use fold changes because the absolute expression values may not
    be accurate and relative changes are what matters

-   we use log~2~ fold changes because they are symmetrical around 0
:::

## Why log~2~ fold change?

::: incremental
-   log~2~ means log to the base 2

-   Suppose the expression in group A is 5 and the expression in group B
    is 8

-   $\frac{A}{B} = \frac{5}{8}$ = 0.625 and $\frac{B}{A} = \frac{8}{5}$ = 1.6

-   If B > A the range of $\frac{A}{B}$ is 0 - 1 but the range of
    $\frac{B}{A}$ is 1 - $\infty$

-   However, if we take the log~2~ of $\frac{A}{B}$ we get -0.678 and the log~2~
    of $\frac{B}{A}$ is 0.678.
:::

## Adjusted *p*-value

::: incremental
-   The *p*-value has to be adjusted because of the number of tested
    being done

-   In stage 1, we used Tukey's HSD to adjust for multiple testing
    following an ANOVA

-   Here the Benjamini-Hochberg procedure [@benjamini1995] is used to
    adjust for multiple testing

-   BH controls the [False Discovery
    Rate](https://en.wikipedia.org/wiki/False_discovery_rate) (FDR)

-   The FDR is the proportion of false positives among the genes called
    significant
:::

## Normalisation

::: incremental
-   Normalisation adjusts raw counts to account for factors that prevent
    direct comparisons

-   Normalisation usually influences the experimental design as well as
    the analysis
:::


## Normalisation

::: incremental
-   üê≠ mice data are normalised 

-   üê∏ frog, üéÑ Arabidopisis and üíâ Leishmania data are raw counts 
    (not normalised) because the differential expression method will do this.

-   Normalisation is a big topic. See @d√ºren2022; @bullard2010;
    @lytal2020; @abrams2019; @vallejos2017; @evans2017
:::

## Type of DE tests

::: incremental
-   A large number of computational methods have been developed for
    differential expression analysis

-   Methods vary in the types of normalisation they do, the statistical
    model they use, and the assumptions they make

-   Some of the most well-known methods are provided by: **`DESeq2`**
    [@DESeq2], **`edgeR`** [@robinson2010; @mccarthy2012; @chen2016],
    **`limma`** [@ritchie2015] and **`scran`** [@scran]
:::

## Type of test (the function)

::: incremental

-   **`DESeq2`** and **`edgeR`**
    -   both require raw counts as input
    -   both assume that most genes are not DE
    -   both use a negative binomial distribution[^1] to model the data
    -   use slightly different normalisation methods: **`DESeq2`** uses
        the median of ratios method; **`edgeR`** uses the trimmed mean
        of M values (TMM) method


[^1]: A discrete distribution for counts, similar to the Poisson
    distribution
:::

## Type of test (the function)

-   **`scran`** 
    -   works on normalized log-expression values 
    -   performs Welch t-tests



## Meta data

::: incremental
-   DE methods require two types of data: the expression data and the
    meta data

-   The meta data gives the information about the samples

-   It says which samples (which columns of data) are in which 
    treatment group (s)

-   Meta data is usually stored in a separate file
:::

## üê∏ Frog development

-   Expression for the whole transcriptome [*X. laevis* v10.1 genome
    assembly](https://www.xenbase.org/xenbase/static-xenbase/ftpDatafiles.jsp)

-   Values are raw counts

-   The statistical analysis method we will use **`DESeq2`** [@DESeq2]
    requires raw counts and performs the normalisation itself

## üéÑ *Arabidopisis*

-   Expression for the whole transcriptome [ENSEMBL *Arabidopsis* TAIR10](https://plants.ensembl.org/Arabidopsis_thaliana/Info/Index)[@yates_ensembl_2022]

-   Values are raw counts

-   The statistical analysis method we will use **`DESeq2`** [@DESeq2]
    requires raw counts and performs the normalisation itself

## üíâ *Leishmania*

-   Expression for the whole transcriptome [*L. mexicana* MHOM/GT/2001/U1103](https://tritrypdb.org/tritrypdb/app/record/dataset/DS_e318592c8e)[@rogers_chromosome_2011]


-   Values are raw counts

-   The statistical analysis method we will use **`DESeq2`** [@DESeq2]
    requires raw counts and performs the normalisation itself
    
## üê≠ Stem cells

-   Expression for a *subset* of the transcriptome, the surfaceome

-   Values are log2 normalised values

-   The statistical analysis method we will use **`scran`** [@scran]
    requires normalised values


# Adding gene information

## Adding gene information

::: incremental
-   The gene id is difficult to interpret

-   Therefore we need to add information such as the gene name and a
    description to the results

-   üê∏ Frog data information comes from Xenbase [@fisher2023]

-   üéÑ *Arabidopisis* information comes from TAIR10 [@yates_ensembl_2022]

-   üíâ *Leishmania* information comes TriTrypDB [@rogers_chromosome_2011]

-   üê≠ Stem cell information comes from Ensembl [@birney2004]
:::

## üê∏ Xenbase

![xenbase logo](images/Xenbase-Logo-Medium.png){width="800"}

[Xenbase](http://www.xenbase.org/) is a model organism database that
provides genomic, molecular, and developmental biology information about
*Xenopus laevis* and *Xenopus tropicalis*.

. . .

It took me some time to find the information you need.

## üê∏ Xenbase

::: incremental

::: {style="font-size: 80%;"}
-   I got the information from the [Xenbase information
    pages](https://www.xenbase.org/xenbase/static-xenbase/ftpDatafiles.jsp)
    under Data Reports \| Gene Information

-   This is listed: Xenbase Gene Product Information \[readme\] [gzipped
    gpi (tab
    separated)](https://download.xenbase.org/xenbase/GenePageReports/xenbase.gpi.gz)

-   Click on the readme link to see the file format and columns

-   I downloaded
    [xenbase.gpi.gz](https://download.xenbase.org/xenbase/GenePageReports/xenbase.gpi.gz),
    unzipped it, removed header lines and the *Xenopus tropicalis*
    (taxon:8364) entries and saved it as
    [xenbase_info.xlsx](meta/xenbase_info.xlsx)

-   In the workshop you will import this file and merge the information
    with the results file
:::
:::

##  üéÑ TAIR10 through Ensembl

::: incremental
-   [Ensembl](https://www.ensembl.org/index.html) creates, integrates
    and distributes reference datasets and analysis tools that enable
    genomics

-   [BioMart](https://grch37.ensembl.org/info/data/biomart/index.html) 
    [@smedley2009] provides uniform access to these large datasets

-   **`biomaRt`** [@biomaRt1; @biomaRt2] is a Bioconductor package gives you
    programmatic access to BioMart.

-   In the workshop you use this package to get information you can
    merge with the results file
:::

## üíâ TriTrypDB


## üê≠ Ensembl

::: incremental
-   [Ensembl](https://www.ensembl.org/index.html) creates, integrates
    and distributes reference datasets and analysis tools that enable
    genomics

-   [BioMart](https://grch37.ensembl.org/info/data/biomart/index.html) 
    [@smedley2009] provides uniform access to these large datasets

-   **`biomaRt`** [@biomaRt1; @biomaRt2] is a Bioconductor package gives you
    programmatic access to BioMart.

-   In the workshop you use this package to get information you can
    merge with the results file
:::



## Packages

These packages are all on the University computers which you can access on 
campus or [remotely using the VDS](https://www.york.ac.uk/it-services/tools/vds/)

If you want to use your own machine you will need to install the packages.
::: {style="font-size: 60%;"}

Install **`BiocManager`** from CRAN in the the normal way and set the version of Bioconductor packages to install:

```{r}
#| eval: false
install.packages("BiocManager")
BiocManager::install(version = "3.19")
```

Install **`DESeq2`** from Bioconductor using BiocManager:
```{r}
#| eval: false
BiocManager::install("DESeq2")
```

Install **`scran`** from Bioconductor using BiocManager:
```{r}
#| eval: false
BiocManager::install("scran")
```

Install **`biomaRt`** from Bioconductor using BiocManager:
```{r}
#| eval: false
BiocManager::install("biomaRt")
```

:::


# Workshops

## Workshops

-   Transcriptomics 1: Hello data Getting to know the data. Checking the
    distributions of values overall, across rows and columns to
    check things are as we expect and detect rows/columns that need to
    be removed

-   Transcriptomics 2: Statistical Analysis. Identifying which genes are
    differentially expressed between treatments. This is the main
    analysis step. We will use different methods for bulk and single
    cell data.

-   Transcriptomics 3: Visualising. Principal Component 
    Analysis (PCA) volcano plots to visualise the results of the 

## References

Pages made with R [@R-core], Quarto [@Allaire_Quarto_2024], `knitr` [@knitr1; @knitr2; @knitr3], `kableExtra` [@kableExtra]