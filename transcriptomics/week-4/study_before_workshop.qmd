---
title: "Independent Study to prepare for workshop"
subtitle: "Transcriptomics 2: Statistical Analysis"
author: "Emma Rand"
format: 
  revealjs:
    footer: "üîó [About Transcriptomics 2: Statistical Analysis](https://3mmarand.github.io/BIO00088H-data/omics/week-4/overview.html)"
    slide-number: true
    chalkboard: true
    code-link: true
    code-line-numbers: false
bibliography: ../../references.bib
editor: 
  markdown: 
    wrap: 72
---

## Overview

In these slides we will:

::: incremental
-   Check where you are

-   learn some concepts in differential expression

    -   log2 fold changes
    -   Multiple correction
    -   normalisation
    -   statistical model

-   Find out what packages to install before the workshop
:::

# Where should you be?

## What we did in Transcriptomics 1: üëã Hello data!

::: incremental
::: {style="font-size: 90%;"}
-   Discovered how many rows and columns we had in our datasets and what
    these were.
-   Examined the distribution
    -   of values across the whole dataset
    -   of values across the samples/cells (i.e., averaged across genes)
        to see variation between samples/cells
    -   of values across the genes (i.e., averaged across samples/cells)
        to see variation between genes
-   Saved files of filtered or summarised data.
:::
:::

## Where should you be?

After the [Transcriptomics 1: üëã Hello data! Workshop](../week-3/workshop.html)
including:

-   [ü§ó Look after future
    you!](../week-3/workshop.html#look-after-future-you) and

-   the [Independent Study to
    consolidate](../week-3/study_after_workshop.html), you should have:

## üê∏ Frogs

::: {style="font-size: 90%;"}
-   An RStudio Project called `frogs-88H` which contains:
    -   Raw data (S14, S20 and S30)
    -   Processed data (`s30_filtered.csv`, `s30_summary_gene.csv`,
        `s30_summary_gene_filtered.csv`, `s30_summary_samp.csv` and
        equivalents for S14 *OR* S20)
    -   Two scripts called `cont-fgf-s30.R` and `cont-fgf-s20.R` *OR*
        `cont-fgf-s14.R`
:::

Files should be organised into folders. Code should well commented and
easy to read.

## üê≠ Mice

-   An RStudio Project called `mice-88H` which contains
    -   Raw data (hspc, prog, lthsc)
    -   Processed data (`hspc_summary_gene.csv`,
        `hspc_summary_samp.csv`, `prog_summary_gene.csv`,
        `prog_summary_samp.csv`)
-   One script called `hspc-prog.R`

Files should be organised into folders. Code should well commented and
easy to read.

## üçÇ

Either of the other examples.

## If you do not have those

Go through:

-   [Transcriptomics 1: üëã Hello data! Workshop](../week-3/workshop.html)
    including:

-   [ü§ó Look after future
    you!](../week-3/workshop.html#look-after-future-you) and

-   the [Independent Study to
    consolidate](../week-3/study_after_workshop.html)

# Differential expression

## Differential expression

::: incremental
-   The goal of differential expression is to test whether there is a
    significant difference in gene expression between groups.

-   A large number of computational methods have been developed for
    differential expression analysis

-   R is the leading language for differential expression analysis
:::

## Differential expression

::: incremental
-   the statistical concepts are very similar to those you have already
    encountered in stages 1 and 2

-   you are essentially doing paired- or independent-samples tests

-   but you are doing a lot of them! One for every gene

-   data need normalisation before comparison
:::

## Statistical concepts

Like familiar tests:

::: incremental
-   the type of test (the function) you use depends on the type of data
    you have and the type of assumptions you want to make

-   the tests work by comparing the variation between groups to the
    variation within groups.

-   you will get: the difference between groups, a test statistic, and a
    *p*-value

-   you also get an adjusted *p*-value which is the 'correction' for
    multiple testing
:::

## The difference between groups

::: incremental
-   The difference between groups is given as the log~2~ fold change in
    expression between groups

-   A fold change is the expression in one group divided by the
    expression in the other group

-   we use fold changes because the absolute expression values may not
    be accurate and relative changes are what matters

-   we use log~2~ fold changes because they are symmetrical around 0
:::

## log~2~ fold change

::: incremental
-   log~2~ means log to the base 2

-   Suppose the expression in group A is 5 and the expression in group B
    is 8

-   A/B = 5/8 = 0.625 and B/A = 8/5 = 1.6

-   If B is greater than A the range of A/B is 0 to 1 but the range of
    B/A is 1 to infinity

-   However, if we take the log~2~ of A/B we get -0.678 and the log~2~
    of B/A is 0.678.
:::

## Adjusted *p*-value

::: incremental
-   The *p*-value has to be adjusted because of the number of tested
    being done

-   In stage 1, we used Tukey's HSD to adjust for multiple testing
    following an ANOVA

-   Here the Benjamini-Hochberg procedure [@benjamini1995] is used to
    adjust for multiple testing

-   BH controls the [False Discovery
    Rate](https://en.wikipedia.org/wiki/False_discovery_rate) (FDR)

-   The FDR is the proportion of false positives among the genes called
    significant
:::

## Normalisation

::: incremental
-   Normalisation adjusts raw counts to account for factors that prevent
    direct comparisons

-   Normalisation usually influences the experimental design as well as
    the analysis

-   The üê≠ mouse data have been normalised to simplify the analysis for
    you; the üê∏ frog data have not but the DE method will do this for
    you.

-   Normalisation is a big topic. See @d√ºren2022; @bullard2010;
    @lytal2020; @abrams2019; @vallejos2017; @evans2017
:::

## Type of test (the function)

::: incremental
-   A large number of computational methods have been developed for
    differential expression analysis

-   Methods vary in the types of normalisation they do, the statistical
    model they use, and the assumptions they make

-   Some of the most well-known methods are provided by: **`DESeq2`**
    [@DESeq2], **`edgeR`** [@robinson2010; @mccarthy2012; @chen2016],
    **`limma`** [@ritchie2015] and **`scran`** [@scran]
:::

## Type of test (the function)

::: incremental

-   **`DESeq2`** and **`edgeR`**
    -   both require raw counts as input
    -   both assume that most genes are not DE
    -   both use a negative binomial distribution[^1] to model the data
    -   use slightly different normalisation methods: **`DESeq2`** uses
        the median of ratios method; **`edgeR`** uses the trimmed mean
        of M values (TMM) method
:::

[^1]: A discrete distribution for counts, similar to the Poisson
    distribution


## Type of test (the function)

-   **`scran`** 
    -   works on normalized log-expression values 
    -   performs Welch t-tests



## Meta data

::: incremental
-   DE methods require two types of data: the expression data and the
    meta data

-   The meta data is the information about the samples

-   It says which samples (columns) are in which group (s)

-   It is usually stored in a separate file
:::

## üê∏ Data

-   Expression for the whole transcriptome [*X. laevis* v10.1 genome
    assembly](https://www.xenbase.org/xenbase/static-xenbase/ftpDatafiles.jsp)

-   Values are raw counts

-   The statistical analysis method we will use **`DESeq2`** [@DESeq2]
    requires raw counts and performs the normalisation itself

## üê≠ Data

-   Expression for a subset of genes, the surfaceome

-   Values are log2 normalised values

-   The statistical analysis method we will use **`scran`** [@scran]
    requires normalised values


## Packages to install before the workshop

**`BiocManager`** from CRAN in the the normal way and set the version of Bioconductor packages to install:

```{r}
#| eval: false
install.packages("BiocManager")
BiocManager::install(version = "3.19")
```

**`DESeq2`** from Bioconductor using BiocManager:
```{r}
#| eval: false
BiocManager::install("DESeq2")
```

**`scran`** from Bioconductor using BiocManager:
```{r}
#| eval: false
BiocManager::install("scran")
```

# Workshops

## Workshops

-   Transcriptomics 1: Hello data Getting to know the data. Checking the
    distributions of values

-   Transcriptomics 2: Statistical Analysis Identifying which genes are
    differentially expressed between treatments.

-   Transcriptomics 3: Visualising and Interpreting. PCA, Volcano plots and
    heatmaps to visualise results. Interpreting the results and finding
    out more about genes of interest.

## References

Pages made with R [@R-core], Quarto [@Allaire_Quarto_2024], `knitr` [@knitr1; knitr2; knitr3], `kableExtra` [@kableExtra]