---
title: "Workshop"
subtitle: "Transcripttranscriptomics 2: Statistical Analysis"
author: "Emma Rand"
toc: true
toc-depth: 4
toc-location: right
execute:
  echo: true
  include: true
  error: true
bibliography: ../../references.bib
editor: 
  markdown: 
    wrap: 72
---

# Introduction

## Session overview

In the workshop, you will learn how to perform differential expression
analysis on raw counts using **`DESeq2`** [@DESeq2] or on logged
normalised expression values using **`scran`** [@scran] or both.

# Set up

Either:

🎬 Open 🐸 `frogs-88H` Project and the `cont-fgf-s30.R` script.

Or

🎬 Open 🐭 `mice-88H` Project and the `hspc-prog.R` script.

🎬 Make a new folder `results` in the project directory. You can use the
New Folder button in the Files pane but here I have used the **`fs`**
[@fs] package

```{r}
#| eval: false
fs::dir_create("results")
```

This is where we will save our results.

🎬 Load **`tidyverse`** [@tidyverse] You most likely have this code at
the top of `cont-fgf-s30.R` or `hspc-prog.R` already.

```{r}
library(tidyverse)
```

```         
── Attaching core tidyverse packages ─────────────────────────────────────────────── tidyverse 2.0.0 ──
✔ dplyr     1.1.3     ✔ readr     2.1.4
✔ forcats   1.0.0     ✔ stringr   1.5.0
✔ ggplot2   3.4.3     ✔ tibble    3.2.1
✔ lubridate 1.9.3     ✔ tidyr     1.3.0
✔ purrr     1.0.2     
── Conflicts ───────────────────────────────────────────────────────────────── tidyverse_conflicts() ──
✖ dplyr::filter() masks stats::filter()
✖ dplyr::lag()    masks stats::lag()
ℹ Use the conflicted package to force all conflicts to become errors
```

Have you ever stopped to think about this message? It is telling us that
there are functions in the `dplyr` package that have the same name as
functions in the `stats` package and that R will use the `dplyr`
version. As this is what you want, this has always been fine. It still
is fine in this case. However, as you start to load more packages, you
will want to know if you are using a function from a package that has
the same name as a function in another loaded package. This is where the
**`conflicted`** [@conflicted] package comes in. **`Conflicted`** will
warn you when you are using a function that has the same name as a
function in another package. You can then choose which function to use.

🎬 Load the **`conflicted`** package:

```{r}
library(conflicted)
```

Instead of getting a warning every time you are using a function that
has a function with the same name in another package, we can declare a
preference for one function over another. This is useful for the
functions you use a lot or ones where you are certain you always want to
use a particular function.

🎬 Use the **`dplyr`** version of `filter()` by default:

```{r}
conflict_prefer("filter", "dplyr")
```

# 🐸 Analysis

We will carry out several steps

1.  Import the data
2.  Find the genes that are expressed in only one treatment (the control
    or the FGF-treated)
3.  Create a DESeqDataSet object. This is a special object that is used
    by the **`DESeq2`** package
4.  Prepare the normalised counts from the DESeqDataSet object.
5.  Do differential expression analysis on the genes. This needs to be
    done on the raw counts.

The creation of the DESeqDataSet object, the preparation of the
normalised counts and the differential expression analysis are all done
with the **`DESeq2`** package

## Import

We need to import the S30 data that were filtered to remove genes with
4, 5 or 6 zeros and those where the total counts was less than 20.

🎬 Import the data from the `data-processed` folder.

```{r}
#| echo: false
#---CODING ANSWER---
s30_filtered <- read_csv("data-processed/s30_filtered.csv")
```

## Genes expressed in one treatment

The genes expressed in only one treatment group are those with zeros in
all three replicates in one group and non-zero values in all three
replicates in the other group. For example, those shown here:

```{r}
#| echo: false
# sort the data by the values in the control column
s30_filtered |>  
  arrange(S30_C_3) |> 
  head(3)

```

We will use `filter()` to find these genes.

🎬 Find the genes that are expressed only in the FGF-treated group:

```{r}
s30_fgf_only <- s30_filtered |> 
  filter(S30_C_1 == 0, 
         S30_C_2 == 0, 
         S30_C_3 == 0, 
         S30_F_1 > 0, 
         S30_F_2 > 0, 
         S30_F_3 > 0)
```

❓ How many genes are expressed only in the FGF-treated group?

<!-- #---THINKING ANSWER--- -->

<!-- There are 26 genes expressed only in the FGF-treated group. -->

🎬 Now you find any genes that are expressed only in the control group.

```{r}
#| echo: false
#---CODING ANSWER---
s30_con_only <- s30_filtered |> 
  filter(S30_C_1 > 0, 
         S30_C_2 > 0, 
         S30_C_3 > 0, 
         S30_F_1 == 0, 
         S30_F_2 == 0, 
         S30_F_3 == 0)

```

❓ Do the results make sense to you in light of what you know about the
biology?

<!-- #---THINKING ANSWER--- -->

<!-- there are no genes expressed in the control group but not in the FGF-treated group -->

<!-- Since FGF is a growth factor, it is likely to induce the expression of genes. Therefore,  -->

<!-- it is not surprising to me that there are no genes expressed in the control group but  -->

<!-- not in the FGF-treated group. However, I'm not an expert in developmental biology.  -->

<!-- Domain expertise is important when analysing data so discuss your results with Betsy  -->

<!-- and your group. -->

🎬 Write to file (saved in `results`) all the genes that are expressed
one group only.

```{r}
#| echo: false
#---CODING ANSWER---
write_csv(s30_fgf_only, "results/s30_fgf_only.csv")
```

## Create DESeqDataSet object

🎬 Load the DESeq2 package:

```{r}
#| echo: false
#---CODING ANSWER---
conflicts_prefer(GenomicRanges::setdiff)
library(DESeq2)
```

A DEseqDataSet object is a custom data type that is used by
**`DESeq2`**. Custom data types are common in the Bioconductor[^1]
packages. They are used to store data in a way that is useful for the
analysis. These data types typically have data, transformed data,
metadata and experimental designs within them.

[^1]: [Bioconductor](https://www.bioconductor.org/) is a project that
    develops and supports R packages for bioinformatics.

To create a DESeqDataSet object, we need to provide three things:

1.  The raw counts - these are what we imported into `s30_filtered`
2.  The meta data which gives information about the samples and which
    treatment groups they belong to
3.  A design matrix which captures the design of the statistical model.

The counts must in a matrix rather than a dataframe. Unlike a dataframe,
a matrix has columns of all the same type. That is, it will contain only
the counts. The gene ids are given as row names rather than a column.
The `matrix()` function will create a matrix from a dataframe of columns
of the same type and the `select()` function can be used to remove the
gene ids column.

🎬 Create a matrix of the counts:

```{r}
s30_count_mat <- s30_filtered |>
  select(-xenbase_gene_id) |>
  as.matrix()
```

🎬 Add the gene ids as row names to the matrix:

```{r}
# add the row names to the matrix
rownames(s30_count_mat) <- s30_filtered$xenbase_gene_id

```

You might want to view the matrix.

The metadata are in a file,
[frog_meta_data.txt](meta/frog_meta_data.txt). This is a
tab-delimited file. The first column is the sample name and the second
column is the treatment group.

🎬 Make a folder called `meta` and save the file to it.

🎬 Read the metadata into a dataframe:

```{r}
meta <- read_table("meta/frog_meta_data.txt")
```

🎬 Examine the resulting dataframe.

We need to add the sample names as row names to the metadata dataframe.
This is because the DESeqDataSet object will use the row names to match
the samples in the metadata to the samples in the counts matrix.

🎬 Add the sample names as row names to the metadata dataframe:

```{r}
row.names(meta) <- meta$sample_id
```

(you will get a warning message but you can ignore it)

We are dealing only with the S30 data so we need to remove the samples
that are not in the S30 data.

🎬 Filter the metadata to keep only the S30 information:

```{r}
meta_S30 <- meta |>
  dplyr::filter(stage == "stage_30")
```

```{r}
#| echo: false
meta_S30
```

We can now create the DESeqDataSet object. The design formula describes
the statistical model You should notice that it is the same sort of
formula we used in `t.test()`, `lm()`,`glm()` etc. The `~` indicates
that the left hand side is the response variable (in this case counts)
and the right hand side are the explanatory variables. We are interested
in the difference between the treatments but we include `sibling_rep` to
account for the fact that the data are paired. The names of the columns
in the count matrix have to match the names in the metadata dataframe
and the names of the explanatory variables in the design formula have to
match the names of columns in the metadata.

🎬 Create the DESeqDataSet object:

```{r}
dds <- DESeqDataSetFromMatrix(countData = s30_count_mat,
                              colData = meta_S30,
                              design = ~ treatment + sibling_rep)
```

The warning "Warning: some variables in design formula are characters,
converting to factors" just means that the variable type of treatment
and sibling_rep in the metadata dataframe are char. This is not a as
`DESeqDataSetFromMatrix()` has made them into the factors it needs.

🎬 Examine the DESeqDataSet object.

The counts are in `dds@assays@data@listData[["counts"]]` and the
metadata are in `dds@colData` but the easiest way to see them is to use
the `counts()` and `colData()` functions from the **`DESeq2`** package.

🎬 View the counts:

```{r}
counts(dds) |> View()
```

You should be able to see that this is the same as in `s30_count_mat`.

```{r}
colData(dds)

```

## Prepare the normalised counts

The normalised counts are the counts that have been transformed to
account for the library size (i.e., the total number of reads in a
sample) and the gene length. We have to first estimate the normalisation
factors and store them in the DESeqDataSet object and then we can get
the normalised counts.

🎬 Estimate the factors for normalisation and store them in the
DESeqDataSet object:

```{r}
dds <- estimateSizeFactors(dds)
```

🎬 Look at the factors (just for information):

```{r}
sizeFactors(dds)
```

To get the normalised counts we again used the `counts()` function but
this time we use the `normalized=TRUE` argument.

🎬 Save the normalised to a matrix:

```{r}
normalised_counts <- counts(dds, normalized = TRUE)
```

We will write the normalised counts to a file so that we can use them in
the future.

🎬 Make a dataframe of the normalised counts, add a column for the gene
ids and write to file:

```{r}
data.frame(normalised_counts,
           xenbase_gene_id = row.names(normalised_counts)) |>
  write_csv(file = "results/S30_normalised_counts.csv")
```

## Differential expression analysis

We used the `DESeq()` function to do the differential expression
analysis. This function fits the statistical model to the data and then
uses the model to calculate the significance of the difference between
the treatments. It again stored the results in the DESseqDataSet object.
Note that the differential expression needs the raw (unnormalised
counts) as it does its own normalisation as part of the process.

🎬 Run the differential expression analysis:

```{r}
dds <- DESeq(dds)
```

The function will take only a few moments to run on this data but can
take longer for bigger datasets.

We need to define the contrasts we want to test. We want to test the
difference between the treatments so we will define the contrast as
`FGF` and `control`.

🎬 Define the contrast:

```{r}
contrast_fgf <- c("treatment", "FGF", "control")
```

Note that `treatment` is the name of the column in the metadata
dataframe and `FGF` and `control` are the names of the levels in the
`treatment` column. By putting them in the order `FGF` , `control` we
are saying the fold change will be FGF / control. If we had put them in
the order `control`, `FGF` we would have got the fold change as control
/ FGF. This means:

-   positive log fold changes indicate FGF \> control and
-   negative log fold changes indicates control \> FGF.

🎬 Extract the results from the DESseqDataSet object:

```{r}
results_fgf <- results(dds,
                       contrast = contrast_fgf)
```

This will give us the log2 fold change and p-value for the contrast.
## Add gene information from Xenbase

-   I got the information from the [Xenbase information
    pages](https://www.xenbase.org/xenbase/static-xenbase/ftpDatafiles.jsp)
    under Data Reports \| Gene Information

-   This is listed: Xenbase Gene Product Information \[readme\] [gzipped
    gpi (tab
    separated)](https://download.xenbase.org/xenbase/GenePageReports/xenbase.gpi.gz)

-   Click on the readme link to see the file format and columns

-   I downloaded
    [xenbase.gpi.gz](https://download.xenbase.org/xenbase/GenePageReports/xenbase.gpi.gz),
    unzipped it, removed header lines and the *Xenopus tropicalis*
    (taxon:8364) entries and saved it as
    [xenbase_info.xlsx](meta/xenbase_info.xlsx)

If you want to emulate what I did you can use the following commands in
the terminal after downloading the file:

``` bash
gunzip xenbase.gpi.gz
less xenbase.gpi
q
```

`gunzip` unzips the file and `less` allows you to view the file. `q`
quits the viewer. You will see the header lines and that the file
contains both *Xenopus tropicalis* and *Xenopus laevis*. I read the file
in with `read_tsv` (skipping the first header lines) then filtered out
the *Xenopus tropicalis* entries, dropped some columns and saved the
file as an excel file.

However, I have already done this for you and saved the file as [xenbase_info.xlsx](meta/xenbase_info.xlsx) in the `meta` folder. We will import this file and
join it to the results dataframe.

🎬 Load the **`readxl`** [@readxl] package:

```{r}
library(readxl)
```

🎬 Import the Xenbase gene information file:

```{r}
gene_info <- read_excel("meta/xenbase_info.xlsx") 
```

You should view the resulting dataframe to see what information is
available. You can use `glimpse()` or `View()`.

🎬 Merge the gene information with the results:

```{r}
# join the gene info with the results
s30_results <- s30_results |>
  left_join(gene_info, by = "xenbase_gene_id")
```

We will also find it useful to import the metadata that maps the sample
names to treatments. This will allow us to label the samples in the
visualisations.

🎬 Save the results to a file:

```{r}
data.frame(results_fgf,
           xenbase_gene_id = row.names(results_fgf)) |> 
  write_csv(file = "results/S30_results.csv")
```

# 🐭 Analysis

We will carry out several steps

1.  Import the prog and hspc data
2.  Combine the two datasets ready for analysis
3.  Filter the data to remove genes that are not expressed in any cell
4.  Find the genes that are expressed in only one cell type (the prog or
    the hspc)
5.  Do differential expression analysis on the genes using the
    **`scran`** package. This needs to be done on the logged normalised
    counts.

## Import

🎬 Import surfaceome_hspc.csv and surfaceome_prog.csv into dataframes
called `hspc` and `prog` respectively.

```{r}
#| echo: false
#---CODING ANSWER---
hspc <- read_csv("data-raw/surfaceome_hspc.csv")
prog <- read_csv("data-raw/surfaceome_prog.csv")
```

## Combine the two datasets

We need to combine the two datasets of 701 and 798 cells into one
dataset of 1499 cells, i.e., 1499 columns. The number of rows is the
number of genes, 280. Before combining, we must make sure genes in the
same order in both dataframes or we would be comparing the expression of
one gene in one cell type to the expression of a different gene in the
other cell type!

🎬 Check the gene ids are in the same order in both dataframes:

```{r}
identical(prog$ensembl_gene_id, hspc$ensembl_gene_id)
```

**`scran`** can use a matrix or a dataframe of counts but theses must be
log normalised counts. If using a dataframe, the columns must only
contain the expression values (not the gene ids).

🎬 Combine the two dataframes (minus the gene ids) into one dataframe
called `prog_hspc`:

```{r}
prog_hspc <- bind_cols(prog[-1], hspc[-1])

```

🎬 Now add the gene ids as the row names:

```{r}
row.names(prog_hspc) <- prog$ensembl_gene_id
```

## Filter to remove unexpressed genes

In this dataset, we will not see and genes that are not expressed in any
of the cells because we are using a specific subset of the transcriptome
that was deliberately selected. However, we will go through how to do
this because it is an important step in most analyses.

For the 🐸 frog data you should remember that we were able to filter out
our unexpressed genes in [Transcripttranscriptomics 1](../week-3/workshop.html) because we
were examining both groups to be compared. In that workshop, [we
discussed](../week-3/workshop.html#frog-filtering) that we could not
filter out unexpressed genes in the 🐭 mouse data because we only had
one cell types at that time. During the [Consolidate Independent
Study](../week-3/study_after_workshop.html) you examined the hspc cells.

Where the sum of all the values in the rows is zero, all the entries
must be zero. We can use this to find the filter the genes that are not
expressed in any of the cells. To do row wise aggregates such as the sum
across rows we can use the `rowwise()` function. `c_across()` allows us
to use the colon notation `Prog_001:HSPC_852` in `sum()` rather than
having to list all the column names:
`sum(Prog_001, Prog_002, Prog_002, Prog_004,.....)`

🎬 Find the genes that are 0 in every column of the prog_hspc dataframe:

```{r}
prog_hspc |> 
  rowwise() |> 
  filter(sum(c_across(Prog_001:HSPC_852)) == 0)

```

Notice that we have summed across all the columns.

❓ What do you conclude?

<!-- #---THINKING ANSWER--- -->

<!-- The are no genes that are completely unexpressed in this set of 280 genes -->

We might also examine the genes which are least expressed.

🎬 Find ten least expressed genes:

```{r}
rowSums(prog_hspc) |> sort() |> head(10)
```

❓ What do you conclude?

<!-- #---THINKING ANSWER--- -->

<!-- When you consider that there are 1499 cells, a values of 30 are low even  -->

<!-- considering these are already logged and normalised (ie., the range of  -->

<!-- values is less that it would be for raw counts) -->

## Find the genes that are expressed in only one cell type

To find the genes that are expressed in only one cell type, we can use
the same approach as above but only sum the columns for one cell type.

🎬 Find the genes that are 0 in every column for the HSPC cells:

```{r}
prog_hspc |> 
  rowwise() |> 
  filter(sum(c_across(HSPC_001:HSPC_852)) == 0)

```

We have summed across the HSPC cells only. 
Note that if we knew there were some rows that were all zero across both
cell types, we would need to add
`|> filter(sum(c_across(Prog_001:Prog_852)) != 0)`

meaning zero in all the HSPC but not zero in all the Prog

🎬 Now you find the genes that are 0 in every column for the Prog cells:

```{r}
#| echo: false
#---CODING ANSWER---
prog_hspc |> 
  rowwise() |> 
  filter(sum(c_across(Prog_001:Prog_852)) == 0)

```

❓ What do you conclude?

<!-- #---THINKING ANSWER--- -->

<!-- there are no genes that are expressed in only one cell type -->

## Differential expression analysis

Like **`DESeq2`**, **`scran`** uses a statistical model to calculate the
significance of the difference between the treatments and needs metadata
to define the treatments.

🎬 Load the **`scran`** package:

```{r}
#| echo: false
library(scran)
```

The meta data needed for the frog data was information about which
columns were in which treatment group and which sibling group and we had
that information in a file. Similarly, here we need information on which
columns are from which cell type. Instead of having this is a file, we
will create a vector that indicates which column belongs to which cell
type.

🎬 Create a vector that indicates which column belongs to which cell
type:

```{r}
cell_type <- rep(c("prog","hspc"), 
                 times = c(length(prog) - 1,
                           length(hspc) - 1))
```

The number of times each cell type is repeated is the number of columns
in that cell type minus 1. This is because we have removed the column
with the gene ids. Do check that the length of the `cell_type` vector is
the same as the number of columns in the `prog_hspc` dataframe.

🎬 Run the differential expression analysis:

```{r}
res_prog_hspc <- findMarkers(prog_hspc, 
                             cell_type)
```

`findMarkers()` is the function that runs the differential expression
analysis. The first argument is the dataframe containing the data. The
second argument is the vector indicating which columns are in which cell
type. It gives us two dataframes of the results - rather unnecessarily.
One is the results with fold changes that are Prog/HSPC and the other is
the results with fold changes that are HSPC/Prog. These have the same
magnitude, just a different sign

The dataframe `res_prog_hspc$prog` is log prog - log hspc
(i.e.,Prog/HSPC). This means - Positive fold change: prog is higher than
hspc - Negative fold change: hspc is higher than prog

The dataframe `res_prog_hspc$hspc` is log hspc - log prog (i.e.,
HSPC/Prog). . This means - Positive fold change: hspc is higher than
prog - Negative fold change: prog is higher than hspc

```{r}
#| echo: false
data.frame(res_prog_hspc$prog, 
           ensembl_gene_id = row.names(res_prog_hspc$prog)) |>
  head() |> 
  knitr::kable(cap = "The res_prog_hspc$prog dataframe")
```

```{r}
#| echo: false
data.frame(res_prog_hspc$hspc, 
           ensembl_gene_id = row.names(res_prog_hspc$hspc)) |>
  head() |> 
  knitr::kable(cap = "The res_prog_hspc$hspc dataframe. Notice the sign of the fold change is the other way")
```

## Add gene information from Ensembl using biomaRt

[Ensembl](https://www.ensembl.org/index.html) [@martin2023;
@birney2004]is a bioinformatics project to organise all the biological
information around the sequences of large genomes. The are a large
number of databases but [BioMart](https://www.ensembl.org/info/data/biomart/index.html)
[@smedley2009] provides a consistent interface to the material. There
are web-based tools to use these but the R package **`biomaRt`**
[@biomaRt] gives you programmatic access making it easier to integrate information into R dataframes

🎬 Load the **`biomaRt`** [@biomaRt] package:

```{r}
library(biomaRt)
```

🎬 Connect to the mouse database and see the first 20 bits of information we can retrieve:
```{r}
# Connect to the mouse database
ensembl <- useMart(biomart = "ensembl", 
                   dataset = "mmusculus_gene_ensembl")

# See what information we can retrieve
listAttributes(mart = ensembl) |> head(20)

```

There are many (2,985!) possible bits of information (attributes) that can be obtained. You can replace `head(20)` with `View()` to see them all.

We use the `getBM()` function to retrieve information from the database. The `filters` argument is used to specified what kind of identifier we are supplying to retrieve information. The `attributes` argument is used to select the information we want to retrieve. The `values` argument is used to specify the identifiers. The mart argument is used to specify the connection we created.

🎬 Get the gene information:
```{r}
gene_info <- getBM(filters = "ensembl_gene_id",
                   attributes = c("ensembl_gene_id",
                                  "external_gene_name",
                                  "description"),
                   values = prog_hspc_results$ensembl_gene_id,
                   mart = ensembl)
```

We are getting the gene name and and a description. We also need to get the id because we will use that to merge the `gene_info` dataframe with the `prog_hspc_results` dataframe. Notice the dataframe returned only has 279 rows - one of the ids does not have information.

🎬 We can find which is missing with:

```{r}
#| error: true
# prog_hspc_results |> select(ensembl_gene_id) |> 
#   filter(!ensembl_gene_id %in% gene_info$ensembl_gene_id)

```

Oh, **`conflicted`** has flagged a conflict for us.

🎬 Take the appropriate action to resolve the conflict:


```{r}
#| include: false
#---CODING ANSWER---
# prog_hspc_results |> dplyr::select(ensembl_gene_id) |> 
#   filter(!ensembl_gene_id %in% gene_info$ensembl_gene_id)
```
❓ What is the id which is missing information?

<!-- #---THINKING ANSWER--- -->
<!-- ENSMUSG00000029386	 -->


We might want to look that up - but let's worry about it later if
it turns out to be something important.

🎬 Merge the gene information with the results:

```{r}
prog_hspc_results <- prog_hspc_results |> 
  left_join(gene_info, by = "ensembl_gene_id")
```

I recommend viewing the dataframe to see the new columns.
We now have dataframe with all the info we need, normalised counts,
log~2~ normalised counts, statistical comparisons with fold changes and p
values, information about the gene other than just the id





🎬 Write the results to file:

```{r}
data.frame(res_prog_hspc$prog, 
           ensembl_gene_id = row.names(res_prog_hspc$prog)) |> 
  write_csv("results/prog_hspc_results.csv")
```

# 🤗 Look after future you!

🎬 Go through you script (`cont-fgf-s30.R` or `hspc-prog.R`) and tidy
up. You might need to :

-   collect together library statements at the top of the script
-   remove code that you needed to start today but which wouldn't be
    needed running the script from the top (e.g., importing)
-   edit your comments for clarity
-   rename variables for consistency or clarity
-   remove house keeping or exploratory code
-   restyle code, add code section headers etc

# 🥳 Finished

Well Done!

# Independent study following the workshop

[Consolidate](study_after_workshop.qmd)

# The Code file

These contain all the code needed in the workshop even where it is not
visible on the webpage.

The [workshop.qmd](workshop.qmd) file is the file I use to compile the
practical. Qmd stands for Quarto markdown. It allows code and ordinary
text to be interleaved to produce well-formatted reports including
webpages. Right-click on the link and choose Save-As to download. You
will be able to open the Qmd file in RStudio. Alternatively, [View in
Browser](https://github.com/3mmaRand/BIO00088H-data/blob/main/transcriptomics/week-4/workshop.qmd). Coding and thinking answers are
marked with `#---CODING ANSWER---` and `#---THINKING ANSWER---`

Pages made with R [@R-core], Quarto [@Allaire_Quarto_2024], `knitr` [@knitr1; knitr2; knitr3], `kableExtra` [@kableExtra]

# References
