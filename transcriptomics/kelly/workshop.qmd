---
title: "Workflow for VFA analysis"
subtitle: "Kelly's project"
author: "Emma Rand"
toc: true
toc-depth: 4
toc-location: right
execute:
  echo: true
  include: true
  error: true
bibliography: ../../references.bib
editor: 
  markdown: 
    wrap: 72
---

# Introduction

I have some data and information from Kelly. I have interpreted it and
written some code to do the calculations.

However, Kelly hasn't had a chance to look at it yet so I am providing
the exact information and data he supplied along with my suggested
workflow based on my interpretation of the data and info.

## Exact information supplied by Kelly

*The [file is a CSV
file](data-raw/VFAdata%20for%20BIO00088H%20R_studio.csv), with some
notes on top and the data in the following order, post notes and
headers. Please note that all chemical data is in millimolar. There are
62 rows of actual data.*

*Sample Name -- Replicate, Time (days), Acetate, Propanoate,
Isobutyrate, Butyrate, Isopentanoate, Pentanoate, Isohexanoate,
Hexanoate*

*The students should be able to transform the data from mM to mg/L, and
to g/L. To do this they only need to multiply the molecular weight of
the compound (listed in the notes in the file) by the concentration in
mM to get mg/L. Obviously to get g/L they will just divide by 1000. They
should be able to graph the VFA concentrations with time.*

*They should also be able to do a simple flux measurement, which is the
change in VFA concentration over a period of time, divided by weight or
volume of material. In this case it might be equal to == Delta(Acetate
at 3 days - Acetate at 1 day)/Delta (3days - 1day)/50 mls sludge. This
would provide a final flux with the units of mg acetate per ml sludge
per day. Let me know if this isn't clear.*

*Perhaps more importantly they should be able to graph and extract the
reaction rate, assuming a first order chemical/biological reaction and
an exponential falloff rate. I found this as a starting point
(https://martinlab.chem.umass.edu/r-fitting-data/) , but I assume Emma
has something much more effective already in the pipeline.*

## Emma's Worklflow interpretation

I created these two data files from the original.

1.  8 VFA in mM for 60 samples [vfa.csv](data-raw/vfa.csv). There were
    63 rows of data in the original file. There were no time 0 for one
    treatment and all values were zero for the other treatment so I
    removed those.
    -   Two treatments: straw (CN10) and water (NC)
    -   10 time points: 1, 3, 5, 9, 11, 13, 16, 18, 20, 22
    -   three replicates per treatment per time point
    -   2 x 10 x 3 = 60 groups
    -   8 VFA with concentration in mM (millimolar): acetate,
        propanoate, isobutyrate, butyrate, isopentanoate, pentanoate,
        isohexanoate, hexanoate
2.  Molecular weights for each VFA in grams per mole
    [mol_wt.txt](data-raw/mol_wt.txt) VFAs from AD vials

We need to:

1.  Calculate *Change* in VFA g/l with time
2.  Recalculate the data into grams per litre - convert to molar: 1
    millimolar to molar = 0.001 molar - multiply by the molecular weight
    of each VFA
3.  Calculate the percent representation of each VFA, by mM and by
    weight
4.  Calculate the flux (change in VFA concentration over a period of
    time, divided by weight or volume of material) of each VFA, by mM
    and by weight
5.  Graph and extract the reaction rate, assuming a first order
    chemical/biological reaction and an exponential falloff rate

## Getting started

游꿟 Start RStudio from the Start menu

游꿟 Make an RStudio project. Be deliberate about where you create it so
that it is a good place for you

游꿟 Use the Files pane to make new folders for the data. I suggest
`data-raw` and `data-processed`

游꿟 Make a new script called `analysis.R` to carry out the rest of the
work.

游꿟 Load `tidyverse` [@tidyverse] for importing, summarising, plotting
and filtering.

```{r}
library(tidyverse)
```

## Examine the data

游꿟 Save the files to `data-raw`. Open them and examine them. You may
want to use Excel for the csv file.

游꿟 Answer the following questions:

-   What is in the rows and columns of each file?
-   How many rows and columns are there in each file?
-   How are the data organised ?

## Import

游꿟 Import

```{r}
vfa_cummul <- read_csv("data-raw/vfa.csv") |> janitor::clean_names()
```

游꿟 Split treatment and replicate to separate columns so there is a
treatment column:

```{r}
vfa_cummul <- vfa_cummul |> 
  separate(col = sample_replicate, 
           into = c("treatment", "replicate"), 
           sep = "-",
           remove = FALSE)
```
游닉 This code depends on the `sample_replicate` column being in the form treatment-replicate. In the sample data CN10 and NC are the treatments. The replicate is a number from 1 to 3. The value does include a encoding for time. You might want to edit your file to match this format.
 


The provided data is cumulative/absolute. We need to calculate the
change in VFA with time. There is a function, `lag()` that will help us
do this. It will take the previous value and subtract it from the
current value. We need to do that separately for each `sample_replicate`
so we need to group by `sample_replicate` first. We also need to make
sure the data is in the right order so we will arrange by
`sample_replicate` and `time_day`.

## 1. Calculate *Change* in VFA g/l with time

游꿟 Create dataframe for the change in VFA 游닉 and the change in time

```{r}
vfa_delta <- vfa_cummul |> 
    group_by(sample_replicate)  |> 
    arrange(sample_replicate, time_day) |>
    mutate(acetate = acetate - lag(acetate),
           propanoate = propanoate - lag(propanoate),
           isobutyrate = isobutyrate - lag(isobutyrate),
           butyrate = butyrate - lag(butyrate),
           isopentanoate = isopentanoate - lag(isopentanoate),
           pentanoate = pentanoate - lag(pentanoate),
           isohexanoate = isohexanoate - lag(isohexanoate),
           hexanoate = hexanoate - lag(hexanoate),
           delta_time = time_day - lag(time_day))
```

Now we have two dataframes, one for the cumulative data and one for the
change in VFA and time. Note that the VFA values have been replaced by the change in VFA but the change in time is in a separate column. I have done this because we later want to plot flux (not yet added) against time

游닉 This code also depends on the `sample_replicate` column being in the form treatment-replicate. lag is calculating the difference between a value at one time point and the next for a treatment-replicate combination. 


## 2. Recalculate the data into grams per litre

To make conversions from mM to g/l we need to do mM \* 0.001 \* MW. We
will import the molecular weight data, pivot the VFA data to long format
and join the molecular weight data to the VFA data. Then we can
calculate the g/l. We will do this for both the cumulative and delta
dataframes.

游꿟 import molecular weight data

```{r}
mol_wt <- read_table("data-raw/mol_wt.txt") |>
  mutate(vfa = tolower(vfa))
```

游꿟 Pivot the cumulative data to long format:

```{r}

vfa_cummul <- vfa_cummul |> 
  pivot_longer(cols = -c(sample_replicate,
                         treatment, 
                         replicate,
                         time_day),
               values_to = "conc_mM",
               names_to = "vfa") 
```

View `vfa_cummul` to check you understand what you have done.

游꿟 Join molecular weight to data and calculate g/l (mutate to convert to
g/l \* 0.001 \* MW):

```{r}
vfa_cummul <- vfa_cummul |> 
  left_join(mol_wt, by = "vfa") |>
  mutate(conc_g_l = conc_mM * 0.001 * mw)
```

View `vfa_cummul` to check you understand what you have done.

Repeat for the delta data.

游꿟 Pivot the change data, `delta_vfa` to long format (游닉 delta_time is added to the list of columns that do not need to be pivoted but repeated):

```{r}
vfa_delta <- vfa_delta |> 
  pivot_longer(cols = -c(sample_replicate,
                         treatment, 
                         replicate,
                         time_day,
                         delta_time),
               values_to = "conc_mM",
               names_to = "vfa") 
```

View `vfa_delta` to check it looks like `vfa_cummul`

游꿟 Join molecular weight to data and calculate g/l (mutate to convert to
g/l \* 0.001 \* MW):

```{r}

vfa_delta <- vfa_delta |> 
  left_join(mol_wt, by = "vfa") |>
  mutate(conc_g_l = conc_mM * 0.001 * mw)
```

## 3. Calculate the percent representation of each VFA

by mM and by weight

游꿟 Add a column which is the percent representation of each VFA for mM
and g/l:

```{r}
vfa_cummul <- vfa_cummul |> 
  group_by(sample_replicate, time_day) |> 
  mutate(percent_conc_g_l = conc_g_l / sum(conc_g_l) * 100,
         percent_conc_mM = conc_mM / sum(conc_mM) * 100)

```

## Graphs for info so far

游꿟 Make summary data for graphing

```{r}
vfa_cummul_summary <- vfa_cummul |> 
  group_by(treatment, time_day, vfa) |> 
  summarise(mean_g_l = mean(conc_g_l),
            se_g_l = sd(conc_g_l)/sqrt(length(conc_g_l)),
            mean_mM = mean(conc_mM),
            se_mM = sd(conc_mM)/sqrt(length(conc_mM))) |> 
  ungroup()
```

```{r}
vfa_delta_summary <- vfa_delta |> 
  group_by(treatment, time_day, vfa) |> 
  summarise(mean_g_l = mean(conc_g_l),
            se_g_l = sd(conc_g_l)/sqrt(length(conc_g_l)),
            mean_mM = mean(conc_mM),
            se_mM = sd(conc_mM)/sqrt(length(conc_mM))) |> 
  ungroup()
```

游꿟 Graph the cumulative data, grams per litre:

```{r}

vfa_cummul_summary |> 
  ggplot(aes(x = time_day, colour = vfa)) +
  geom_line(aes(y = mean_g_l), 
            linewidth = 1) +
  geom_errorbar(aes(ymin = mean_g_l - se_g_l,
                    ymax = mean_g_l + se_g_l),
                width = 0.5, 
                show.legend = F,
                linewidth = 1) +
  scale_color_viridis_d(name = NULL) +
  scale_x_continuous(name = "Time (days)") +
  scale_y_continuous(name = "Mean VFA concentration (g/l)") +
  theme_bw() +
  facet_wrap(~treatment) +
  theme(strip.background = element_blank())



```

游꿟 Graph the change data, grams per litre:

```{r}

vfa_delta_summary |> 
  ggplot(aes(x = time_day, colour = vfa)) +
  geom_line(aes(y = mean_g_l), 
            linewidth = 1) +
  geom_errorbar(aes(ymin = mean_g_l - se_g_l,
                    ymax = mean_g_l + se_g_l),
                width = 0.5, 
                show.legend = F,
                linewidth = 1) +
  scale_color_viridis_d(name = NULL) +
  scale_x_continuous(name = "Time (days)") +
  scale_y_continuous(name = "Mean change in VFA concentration (g/l)") +
  theme_bw() +
  facet_wrap(~treatment) +
  theme(strip.background = element_blank())



```

游꿟 Graph the mean percent representation of each VFA g/l. Note
`geom_col()` will plot proportion if we set`position = "fill"`

```{r}
vfa_cummul_summary |> 
  ggplot(aes(x = time_day, y = mean_g_l, fill = vfa)) +
  geom_col(position = "fill") +
  scale_fill_viridis_d(name = NULL) +
  scale_x_continuous(name = "Time (days)") +
  scale_y_continuous(name = "Mean Proportion VFA") +
  theme_bw() +
  facet_wrap(~treatment) +
  theme(strip.background = element_blank())
```

### View the relationship between samples using PCA

We have 8 VFA in our dataset. PCA will allow us to plot our samples in
the "VFA" space so we can see if treatments, time or replicate cluster.

However, PCA expects a matrix with samples in rows and VFA, the
variables, in columns. We will need to select the columns we need and
pivot wider. Then convert to a matrix.

游꿟

```{r}
vfa_cummul_pca <- vfa_cummul |> 
  select(sample_replicate, 
         treatment, 
         replicate, 
         time_day, 
         vfa, 
         conc_g_l) |> 
  pivot_wider(names_from = vfa, 
              values_from = conc_g_l)
  
```

```{r}
mat <- vfa_cummul_pca |> 
  ungroup() |>
  select(-sample_replicate, 
         -treatment, 
         -replicate, 
         -time_day) |> 
  as.matrix()

```

游꿟 Perform PCA on the matrix:

```{r}
pca <- mat |>
  prcomp(scale. = TRUE, 
         rank. = 4) 
```

The `scale.` argument tells `prcomp()` to scale the data to have a mean
of 0 and a standard deviation of 1. The `rank.` argument tells
`prcomp()` to only calculate the first 4 principal components. This is
useful for visualisation as we can only plot in 2 or 3 dimensions. We
can see the results of the PCA by viewing the `summary()` of the `pca`
object.

```{r}
summary(pca)
```

The Proportion of Variance tells us how much of the variance is
explained by each component. We can see that the first component
explains 0.7798 of the variance, the second 0.1018, and the third
0.07597. Together the first three components explain nearly 96% of the
total variance in the data. Plotting PC1 against PC2 will capture about
78% of the variance which is likely much better than we would get
plotting any two VFA against each other. To plot the PC1 against PC2 we
will need to extract the PC1 and PC2 score from the pca object and add
labels for the samples.

游꿟 Create a dataframe of the PC1 and PC2 scores which are in `pca$x` and
add the sample information from vfa_cummul_pca:

```{r}
pca_labelled <- data.frame(pca$x,
                           sample_replicate = vfa_cummul_pca$sample_replicate,
                           treatment = vfa_cummul_pca$treatment,
                           replicate = vfa_cummul_pca$replicate,
                           time_day = vfa_cummul_pca$time_day) 
```

The dataframe should look like this:

```{r}
#| echo: false
knitr::kable(pca_labelled)
```

游꿟 Plot PC1 against PC2 and colour by time and shape by treatment:

```{r}
pca_labelled |> 
  ggplot(aes(x = PC1, y = PC2, 
             colour = factor(time_day),
             shape = treatment)) +
  geom_point(size = 3) +
  scale_colour_viridis_d(end = 0.95, begin = 0.15,
                         name = "Time") +
  scale_shape_manual(values = c(17, 19),
                     name = NULL) +
  theme_classic()
```

游꿟 Plot PC1 against PC2 and colour by time and facet treatment:

```{r}
pca_labelled |> 
  ggplot(aes(x = PC1, y = PC2, colour = factor(time_day))) +
  geom_point(size = 3) +
  scale_colour_viridis_d(end = 0.95, begin = 0.15,
                         name = "Time") +
  facet_wrap(~treatment, ncol = 1) +
  theme_classic()
```

replicates are similar at the same time and treatment especially early
as we might expect. PC is essentially an axis of time.

### Visualise the VFA concentration using a heatmap

We are going to create an interactive heatmap with the **`heatmaply`**
[@heatmaply] package. **`heatmaply`** takes a matrix as input so we can
use `mat`

游꿟 Set the rownames to the sample id whihcih is combination of
`sample_replicate` and `time_day`:

```{r}
rownames(mat) <- interaction(vfa_cummul_pca$sample_replicate, 
                             vfa_cummul_pca$time_day)
```

You might want to view the matrix by clicking on it in the environment
pane.

游꿟 Load the **`heatmaply`** package:

```{r}
library(heatmaply)
```

We need to tell the clustering algorithm how many clusters to create. We
will set the number of clusters for the treatments to be 2 and the
number of clusters for the vfa to be the same since it makes sense to
see what clusters of genes correlate with the treatments.

游꿟 Set the number of clusters for the treatments and vfa:

```{r}
n_treatment_clusters <- 2
n_vfa_clusters <- 2
```

游꿟 Create the heatmap:

```{r}
#| fig-height: 10
heatmaply(mat, 
          scale = "column",
          k_col = n_vfa_clusters,
          k_row = n_treatment_clusters,
          fontsize_row = 7, fontsize_col = 10,
          labCol = colnames(mat),
          labRow = rownames(mat),
          heatmap_layers = theme(axis.line = element_blank()))
```

The heatmap will open in the viewer pane (rather than the plot pane)
because it is html. You can "Show in a new window" to see it in a larger
format. You can also zoom in and out and pan around the heatmap and
download it as a png. You might feel the colour bars is not adding much
to the plot. You can remove it by setting `hide_colorbar = TRUE,` in the
`heatmaply()` function.

One of the NC replicates at time = 22 is very different from the other
replicates. The CN10 treatments cluster together at high time points.
CN10 samples are more similar to NC samples early on. Most of the VFAs
behave similarly with highest values later in the experiment for CN10
but isohexanoate and hexanoate differ. The difference might be because
isohexanoate is especially low in the NC replicates at time = 1 and
hexanoate is especially high in the NC replicate 2 at time = 22

## 4. Calculate the flux

Calculate the flux(change in VFA concentration over a period of time,
divided by weight or volume of material) of each VFA, by mM and by
weight. 
Emma's note: I think the terms flux and reaction rate are used 
interchangeably

I've requested clarification: *for the flux measurements, do they need
graphs of the rate of change wrt time? And is the sludge volume going to
be a constant for all samples or something they measure and varies by
vial?*

Answer: **The sludge volume is constant, at 30 mls within a 120ml vial.
Some students will want to graph reaction rate with time, others will
want to compare the measured GC-FID concentrations against the model
output.**

游닉 Kelly asked for ".. a simple flux measurement, which is the change in VFA concentration over a period of time, divided by weight or volume of material. In this case it might be equal to == Delta(Acetate at 3 days - Acetate at 1 day)/Delta (3days - 1day)/50 mls sludge. This would provide a final flux with the units of mg acetate per ml sludge per day."

Note: Kelly says mg/ml where earlier he used g/L. These are the same (but I called my column `conc_g_l`)

We need to use the `vfa_delta` data frame. It contains the change in VFA concentration and the change in time. We will add a column for the flux of each VFA in g/L/day. (mg/ml/day)

```{r}

sludge_volume <- 30 # ml
vfa_delta <- vfa_delta |> 
  mutate(flux = conc_g_l / delta_time / sludge_volume)
  
```

NAs at time 1 are expected because there's no time before that to calculate a changes 



## 5. Graph and extract the reaction rate - pending

Graph and extract the reaction rate assuming a first order
chemical/biological reaction and an exponential falloff rate

I've requested clarification: *for the nonlinear least squares curve
fitting, I assume x is time but I'm not clear what the Y variable is -
concentration? or change in concentration? or rate of change of
concentration?*

Answer: **The non-linear equation describes concentration change with
time. Effectively the change in concentration is dependent upon the
available concentration, in this example \[Hex\] represents the
concentration of Hexanoic acid, while the T0 and T1 represent time
steps.**

**\[Hex\]T1 = \[Hex\]T0 - \[Hex\]T0 \* k**

**Or. the amount of Hexanoic acid remaining at T1 (let's say one hour
from the last data point) is equal to the starting concentration
(\[Hex\]T0) minus the concentration dependent metabolism (\[Hex\]To \*
k).**

游닉 We can now plot the observed fluxes (reaction rates) over time

I've summarised the data to add error bars and means
```{r}
vfa_delta_summary <- vfa_delta |> 
  group_by(treatment, time_day, vfa) |> 
  summarise(mean_flux = mean(flux),
            se_flux = sd(flux)/sqrt(length(flux))) |> 
  ungroup()
```


```{r}
ggplot(data = vfa_delta, aes(x = time_day, colour = vfa)) +
  geom_point(aes(y = flux), alpha = 0.6) +
  geom_errorbar(data = vfa_delta_summary, 
                aes(ymin = mean_flux - se_flux, 
                    ymax = mean_flux + se_flux), 
                width = 1) +
  geom_errorbar(data = vfa_delta_summary, 
                aes(ymin = mean_flux, 
                    ymax = mean_flux), 
                width = 0.8) +
  scale_color_viridis_d(name = NULL) +
  scale_x_continuous(name = "Time (days)") +
  scale_y_continuous(name = "VFA Flux mg/ml/day") +
  theme_bw() +
  facet_wrap(~treatment) +
  theme(strip.background = element_blank())
```

Or maybe this is easier to read:

```{r}
ggplot(data = vfa_delta, aes(x = time_day, colour = treatment)) +
  geom_point(aes(y = flux), alpha = 0.6) +
  geom_errorbar(data = vfa_delta_summary, 
                aes(ymin = mean_flux - se_flux, 
                    ymax = mean_flux + se_flux), 
                width = 1) +
  geom_errorbar(data = vfa_delta_summary, 
                aes(ymin = mean_flux, 
                    ymax = mean_flux), 
                width = 0.8) +
  scale_color_viridis_d(name = NULL, begin = 0.2, end = 0.7) +
  scale_x_continuous(name = "Time (days)") +
  scale_y_continuous(name = "VFA Flux mg/ml/day") +
  theme_bw() +
  facet_wrap(~ vfa, nrow = 2) +
  theme(strip.background = element_blank(),
        legend.position = "top")
```


I have not yet worked out the best way to plot the modelled reaction rate


# Workflow 2024-04-04

This workflow has been written for the data files I now have! Bear in mind that what you might need from here is going to depend on the narrative of your report. You only need include in the compendium things that support your report.

These are the two files I have

-   [VFAs](https://docs.google.com/spreadsheets/d/1evdDxURggeYih0e4WX1mer9-qjwi0ADZsqlN3JEj3-o/edit#gid=191095748) This actually very similar to the sample data we had. Apart from naming things.


-   [pH](https://docs.google.com/spreadsheets/d/19nDa1EXuZ9Yf7SSwnVPjHQm9MU_zqpaaCeO3VuZtRsk/edit#gid=0)


I fixed some inconsistent formatting and unhelpful naming (sigh!) and down loaded these as csv files and saved them in the data-raw folder as:

-   [vfa2.csv](data-raw/vfa2.csv)

-   [ph.csv](data-raw/ph.csv)

-   We also have  the Molecular weights for each VFA in grams per mole
    [mol_wt.txt](data-raw/mol_wt.txt) 

I recommend restarting R before you start this workflow: Control-Shift-F10 (or use the Session menu)



## VFA data


游꿟 Load packages
```{r}
library(tidyverse)
```



```{r}

vfa_cummul <- read_csv("data-raw/vfa2.csv") |> janitor::clean_names()
```

This what I think we have:

-   set_number Two data sets, one about VFA treatment (2) and one about Protein treatments (1)

-   replicate 

    -   for set 1: 1-4
    -   for set 2: 1-3

-   treatment

    -   for set 1: Casein, Keratin
    -   for set 2: Acetate, Hexanoic, Decanoic

-   time_day time in days (note time in the ph data in in hours)

-   then columns for each of the 8 measured VFA: acetate, propanoate, isobutyrate, butyrate, isopentanoate, pentanoate, isohexanoate, hexanoate


I think some of the data have been mislabelled as set 2 when it is set 1. I changed these in the csv file but not on the google sheet until someone can confirm there really are mislabelled). 


I'm going to split these into the two data sets and work on them separately

游꿟 Split the data into the two sets. Note we also remove the set number column as it isn't need if the data is split into the two sets.

```{r}
vfa_cummul_protein <- vfa_cummul |> 
  filter(set_number == 1) |> 
  select(-set_number)

vfa_cummul_vfa <- vfa_cummul |> 
  filter(set_number == 2) |>
  select(-set_number)
```


`vfa_cummul_protein` has 2 treatments, four replicates and 10 days = 2 x 4 x 10 = 80 rows

`vfa_cummul_vfa` has 3 treatments, 3 replicates and 10 days = 3 x 3 x 10 = 90 rows

游꿟 import molecular weight data

```{r}
mol_wt <- read_table("data-raw/mol_wt.txt") |>
  mutate(vfa = tolower(vfa))
```

### Set 1: Protein treatments

#### 1. Calculate *Change* in VFA g/l with time

游꿟 Create dataframe for the change in VFA the change in time

```{r}
vfa_delta_protein <- vfa_cummul_protein |> 
    group_by(treatment, replicate)  |> 
    arrange(treatment, replicate, time_day) |>
    mutate(acetate = acetate - lag(acetate),
           propanoate = propanoate - lag(propanoate),
           isobutyrate = isobutyrate - lag(isobutyrate),
           butyrate = butyrate - lag(butyrate),
           isopentanoate = isopentanoate - lag(isopentanoate),
           pentanoate = pentanoate - lag(pentanoate),
           isohexanoate = isohexanoate - lag(isohexanoate),
           hexanoate = hexanoate - lag(hexanoate),
           delta_time = time_day - lag(time_day))
```

Now we have two dataframes, one for the cumulative data and one for the
change in VFA and time. Note that the VFA values have been replaced by the change in VFA but the change in time is in a separate column. I have done this because we later want to plot flux. Note that unlike the sample data, the time steps are all 1 day so the change in time is always 1 and not really needed. I have included it here to make more clear that the units of flux are which is the change in VFA concentration per unit of time per unit of weight or volume of material

#### 2. Recalculate the data into grams per litre

To make conversions from mM to g/l we need to do mM \* 0.001 \* MW. We
will pivot the VFA data to long format
and join the molecular weight data to the VFA data. Then we can
calculate the g/l. We will do this for both the cumulative and delta
dataframes.



游꿟 Pivot the cumulative data to long format:

```{r}

vfa_cummul_protein <- vfa_cummul_protein |> 
  pivot_longer(cols = -c(treatment, 
                         replicate,
                         time_day),
               values_to = "conc_mM",
               names_to = "vfa") 
```

View `vfa_cummul_protein` to check you understand what you have done.

游꿟 Join molecular weight to data and calculate g/l (mutate to convert to
g/l \* 0.001 \* MW):

```{r}
vfa_cummul_protein <- vfa_cummul_protein |> 
  left_join(mol_wt, by = "vfa") |>
  mutate(conc_g_l = conc_mM * 0.001 * mw)
```

View `vfa_cummul_protein` to check you understand what you have done.

Repeat for the delta data.

游꿟 Pivot the change data, `vfa_delta_protein` to long format (游닉 delta_time is added to the list of columns that do not need to be pivoted but repeated):

```{r}
vfa_delta_protein <- vfa_delta_protein |> 
  pivot_longer(cols = -c(treatment, 
                         replicate,
                         time_day, 
                         delta_time),
               values_to = "conc_mM",
               names_to = "vfa") 
```

View `vfa_delta_protein` to check it looks like `vfa_cummul_protein`.

游꿟 Join molecular weight to data and calculate g/l (mutate to convert to
g/l \* 0.001 \* MW):

```{r}

vfa_delta_protein <- vfa_delta_protein |> 
  left_join(mol_wt, by = "vfa") |>
  mutate(conc_g_l = conc_mM * 0.001 * mw)
```

#### 3. Calculate the percent representation of each VFA

by mM and by weight

游꿟 Add a column which is the percent representation of each VFA for mM
and g/l:

```{r}
vfa_cummul_protein <- vfa_cummul_protein |> 
  group_by(treatment, replicate, time_day) |> 
  mutate(percent_conc_g_l = conc_g_l / sum(conc_g_l) * 100,
         percent_conc_mM = conc_mM / sum(conc_mM) * 100)

```

#### Graphs for info so far

游꿟 Make summary data for graphing

```{r}
vfa_cummul_protein_summary <- vfa_cummul_protein |> 
  group_by(treatment, time_day, vfa) |> 
  summarise(mean_g_l = mean(conc_g_l),
            se_g_l = sd(conc_g_l)/sqrt(length(conc_g_l)),
            mean_mM = mean(conc_mM),
            se_mM = sd(conc_mM)/sqrt(length(conc_mM))) |> 
  ungroup()
```

```{r}
vfa_delta_protein_summary <- vfa_delta_protein |> 
  group_by(treatment, time_day, vfa) |> 
  summarise(mean_g_l = mean(conc_g_l),
            se_g_l = sd(conc_g_l)/sqrt(length(conc_g_l)),
            mean_mM = mean(conc_mM),
            se_mM = sd(conc_mM)/sqrt(length(conc_mM))) |> 
  ungroup()
```

游꿟 Graph the cumulative data, grams per litre:

```{r}

vfa_cummul_protein_summary |> 
  ggplot(aes(x = time_day, colour = vfa)) +
  geom_line(aes(y = mean_g_l), 
            linewidth = 1) +
  geom_errorbar(aes(ymin = mean_g_l - se_g_l,
                    ymax = mean_g_l + se_g_l),
                width = 0.5, 
                show.legend = F,
                linewidth = 1) +
  scale_color_viridis_d(name = NULL) +
  scale_x_continuous(name = "Time (days)") +
  scale_y_continuous(name = "Mean VFA concentration (g/l)") +
  theme_bw() +
  facet_wrap(~treatment) +
  theme(strip.background = element_blank())



```

游꿟 Graph the change data, grams per litre:

```{r}

vfa_delta_protein_summary |> 
  ggplot(aes(x = time_day, colour = vfa)) +
  geom_line(aes(y = mean_g_l), 
            linewidth = 1) +
  geom_errorbar(aes(ymin = mean_g_l - se_g_l,
                    ymax = mean_g_l + se_g_l),
                width = 0.5, 
                show.legend = F,
                linewidth = 1) +
  scale_color_viridis_d(name = NULL) +
  scale_x_continuous(name = "Time (days)") +
  scale_y_continuous(name = "Mean change in VFA concentration (g/l)") +
  theme_bw() +
  facet_wrap(~treatment) +
  theme(strip.background = element_blank())

```

游꿟 Graph the mean percent representation of each VFA g/l. Note
`geom_col()` will plot proportion if we set`position = "fill"`

```{r}
vfa_cummul_protein_summary |> 
  ggplot(aes(x = time_day, y = mean_g_l, fill = vfa)) +
  geom_col(position = "fill") +
  scale_fill_viridis_d(name = NULL) +
  scale_x_continuous(name = "Time (days)") +
  scale_y_continuous(name = "Mean Proportion VFA") +
  theme_bw() +
  facet_wrap(~treatment) +
  theme(strip.background = element_blank())
```

#### 4. Calculate the flux

Calculate the flux(change in VFA concentration over a period of time,
divided by weight or volume of material) of each VFA, by mM and by
weight. 
Emma's note: I think the terms flux and reaction rate are used 
interchangeably

The sludge volume is constant, at 30 mls. 
Flux units are mg vfa per ml sludge per day


Note: Kelly says mg/ml where earlier he used g/L. These are the same (but I called my column `conc_g_l`)

We need to use the `vfa_delta_protein` data frame. It contains the change in VFA concentration and the change in time. We will add a column for the flux of each VFA in g/L/day. (mg/ml/day)

```{r}

sludge_volume <- 30 # ml
vfa_delta_protein <- vfa_delta_protein |> 
  mutate(flux = conc_g_l / delta_time / sludge_volume)
  
```

NAs at time 1 are expected because there's no time before that to calculate a changes 



#### 5. Graph and extract the reaction rate

We can now plot the observed fluxes (reaction rates) over time

I've summarised the data to add error bars and means
```{r}
vfa_delta_protein_summary <- vfa_delta_protein |> 
  group_by(treatment, time_day, vfa) |> 
  summarise(mean_flux = mean(flux),
            se_flux = sd(flux)/sqrt(length(flux))) |> 
  ungroup()
```


```{r}
ggplot(data = vfa_delta_protein, aes(x = time_day, colour = vfa)) +
  geom_point(aes(y = flux), alpha = 0.6) +
  geom_errorbar(data = vfa_delta_protein_summary, 
                aes(ymin = mean_flux - se_flux, 
                    ymax = mean_flux + se_flux), 
                width = 1) +
  geom_errorbar(data = vfa_delta_protein_summary, 
                aes(ymin = mean_flux, 
                    ymax = mean_flux), 
                width = 0.8) +
  scale_color_viridis_d(name = NULL) +
  scale_x_continuous(name = "Time (days)") +
  scale_y_continuous(name = "VFA Flux mg/ml/day") +
  theme_bw() +
  facet_wrap(~treatment) +
  theme(strip.background = element_blank())
```

Or maybe this is easier to read:

```{r}
ggplot(data = vfa_delta_protein, aes(x = time_day, colour = treatment)) +
  geom_point(aes(y = flux), alpha = 0.6) +
  geom_errorbar(data = vfa_delta_protein_summary, 
                aes(ymin = mean_flux - se_flux, 
                    ymax = mean_flux + se_flux), 
                width = 1) +
  geom_errorbar(data = vfa_delta_protein_summary, 
                aes(ymin = mean_flux, 
                    ymax = mean_flux), 
                width = 0.8) +
  scale_color_viridis_d(name = NULL, begin = 0.2, end = 0.7) +
  scale_x_continuous(name = "Time (days)") +
  scale_y_continuous(name = "VFA Flux mg/ml/day") +
  theme_bw() +
  facet_wrap(~ vfa, nrow = 2) +
  theme(strip.background = element_blank(),
        legend.position = "top")
```


### Set 2: VFA treatments

#### 1. Calculate *Change* in VFA g/l with time

游꿟 Create dataframe for the change in VFA the change in time

```{r}
vfa_delta_vfa <- vfa_cummul_vfa |> 
    group_by(treatment, replicate)  |> 
    arrange(treatment, replicate, time_day) |>
    mutate(acetate = acetate - lag(acetate),
           propanoate = propanoate - lag(propanoate),
           isobutyrate = isobutyrate - lag(isobutyrate),
           butyrate = butyrate - lag(butyrate),
           isopentanoate = isopentanoate - lag(isopentanoate),
           pentanoate = pentanoate - lag(pentanoate),
           isohexanoate = isohexanoate - lag(isohexanoate),
           hexanoate = hexanoate - lag(hexanoate),
           delta_time = time_day - lag(time_day))
```

Now we have two dataframes, one for the cumulative data and one for the
change in VFA and time. Note that the VFA values have been replaced by the change in VFA but the change in time is in a separate column. I have done this because we later want to plot flux. Note that unlike the sample data, the time steps are all 1 day so the change in time is always 1 and not really needed. I have included it here to make more clear that the units of flux are which is the change in VFA concentration per unit of time per unit of weight or volume of material

#### 2. Recalculate the data into grams per litre

To make conversions from mM to g/l we need to do mM \* 0.001 \* MW. We
will pivot the VFA data to long format
and join the molecular weight data to the VFA data. Then we can
calculate the g/l. We will do this for both the cumulative and delta
dataframes.


游꿟 Pivot the cumulative data to long format:

```{r}

vfa_cummul_vfa <- vfa_cummul_vfa |> 
  pivot_longer(cols = -c(treatment, 
                         replicate,
                         time_day),
               values_to = "conc_mM",
               names_to = "vfa") 
```

View `vfa_cummul_vfa` to check you understand what you have done.

游꿟 Join molecular weight to data and calculate g/l (mutate to convert to
g/l \* 0.001 \* MW):

```{r}
vfa_cummul_vfa <- vfa_cummul_vfa |> 
  left_join(mol_wt, by = "vfa") |>
  mutate(conc_g_l = conc_mM * 0.001 * mw)
```

View `vfa_cummul_vfa` to check you understand what you have done.

Repeat for the delta data.

游꿟 Pivot the change data, `vfa_delta_vfa` to long format (游닉 delta_time is added to the list of columns that do not need to be pivoted but repeated):

```{r}
vfa_delta_vfa <- vfa_delta_vfa |> 
  pivot_longer(cols = -c(treatment, 
                         replicate,
                         time_day,
                         delta_time),
               values_to = "conc_mM",
               names_to = "vfa") 
```

View `vfa_delta_vfa` to check it looks like `vfa_cummul_vfa`.

游꿟 Join molecular weight to data and calculate g/l (mutate to convert to
g/l \* 0.001 \* MW):

```{r}

vfa_delta_vfa <- vfa_delta_vfa |> 
  left_join(mol_wt, by = "vfa") |>
  mutate(conc_g_l = conc_mM * 0.001 * mw)
```

#### 3. Calculate the percent representation of each VFA

by mM and by weight

游꿟 Add a column which is the percent representation of each VFA for mM
and g/l:

```{r}
vfa_cummul_vfa <- vfa_cummul_vfa |> 
  group_by(treatment, replicate, time_day) |> 
  mutate(percent_conc_g_l = conc_g_l / sum(conc_g_l) * 100,
         percent_conc_mM = conc_mM / sum(conc_mM) * 100)

```

#### Graphs for info so far

游꿟 Make summary data for graphing

```{r}
vfa_cummul_vfa_summary <- vfa_cummul_vfa |> 
  group_by(treatment, time_day, vfa) |> 
  summarise(mean_g_l = mean(conc_g_l),
            se_g_l = sd(conc_g_l)/sqrt(length(conc_g_l)),
            mean_mM = mean(conc_mM),
            se_mM = sd(conc_mM)/sqrt(length(conc_mM))) |> 
  ungroup()
```

```{r}
vfa_delta_vfa_summary <- vfa_delta_vfa |> 
  group_by(treatment, time_day, vfa) |> 
  summarise(mean_g_l = mean(conc_g_l),
            se_g_l = sd(conc_g_l)/sqrt(length(conc_g_l)),
            mean_mM = mean(conc_mM),
            se_mM = sd(conc_mM)/sqrt(length(conc_mM))) |> 
  ungroup()
```

游꿟 Graph the cumulative data, grams per litre:

```{r}

vfa_cummul_vfa_summary |> 
  ggplot(aes(x = time_day, colour = vfa)) +
  geom_line(aes(y = mean_g_l), 
            linewidth = 1) +
  geom_errorbar(aes(ymin = mean_g_l - se_g_l,
                    ymax = mean_g_l + se_g_l),
                width = 0.5, 
                show.legend = F,
                linewidth = 1) +
  scale_color_viridis_d(name = NULL) +
  scale_x_continuous(name = "Time (days)") +
  scale_y_continuous(name = "Mean VFA concentration (g/l)") +
  theme_bw() +
  facet_wrap(~treatment) +
  theme(strip.background = element_blank())



```

游꿟 Graph the change data, grams per litre:

```{r}

vfa_delta_vfa_summary |> 
  ggplot(aes(x = time_day, colour = vfa)) +
  geom_line(aes(y = mean_g_l), 
            linewidth = 1) +
  geom_errorbar(aes(ymin = mean_g_l - se_g_l,
                    ymax = mean_g_l + se_g_l),
                width = 0.5, 
                show.legend = F,
                linewidth = 1) +
  scale_color_viridis_d(name = NULL) +
  scale_x_continuous(name = "Time (days)") +
  scale_y_continuous(name = "Mean change in VFA concentration (g/l)") +
  theme_bw() +
  facet_wrap(~treatment) +
  theme(strip.background = element_blank())



```

游꿟 Graph the mean percent representation of each VFA g/l. Note
`geom_col()` will plot proportion if we set`position = "fill"`

```{r}
vfa_cummul_vfa_summary |> 
  ggplot(aes(x = time_day, y = mean_g_l, fill = vfa)) +
  geom_col(position = "fill") +
  scale_fill_viridis_d(name = NULL) +
  scale_x_continuous(name = "Time (days)") +
  scale_y_continuous(name = "Mean Proportion VFA") +
  theme_bw() +
  facet_wrap(~treatment) +
  theme(strip.background = element_blank())
```



#### 4. Calculate the flux

Calculate the flux(change in VFA concentration over a period of time,
divided by weight or volume of material) of each VFA, by mM and by
weight. 
Emma's note: I think the terms flux and reaction rate are used 
interchangeably

The sludge volume is constant, at 30 mls. 
Flux units are mg vfa per ml sludge per day


Note: Kelly says mg/ml where earlier he used g/L. These are the same (but I called my column `conc_g_l`)

We need to use the `vfa_delta_vfa` data frame. It contains the change in VFA concentration and the change in time. We will add a column for the flux of each VFA in g/L/day. (mg/ml/day)

```{r}

sludge_volume <- 30 # ml
vfa_delta_vfa <- vfa_delta_vfa |> 
  mutate(flux = conc_g_l / delta_time / sludge_volume)
  
```

NAs at time 1 are expected because there's no time before that to calculate a changes 



#### 5. Graph and extract the reaction rate

We can now plot the observed fluxes (reaction rates) over time

I've summarised the data to add error bars and means
```{r}
vfa_delta_vfa_summary <- vfa_delta_vfa |> 
  group_by(treatment, time_day, vfa) |> 
  summarise(mean_flux = mean(flux),
            se_flux = sd(flux)/sqrt(length(flux))) |> 
  ungroup()
```


```{r}
ggplot(data = vfa_delta_vfa, aes(x = time_day, colour = vfa)) +
  geom_point(aes(y = flux), alpha = 0.6) +
  geom_errorbar(data = vfa_delta_vfa_summary, 
                aes(ymin = mean_flux - se_flux, 
                    ymax = mean_flux + se_flux), 
                width = 1) +
  geom_errorbar(data = vfa_delta_vfa_summary, 
                aes(ymin = mean_flux, 
                    ymax = mean_flux), 
                width = 0.8) +
  scale_color_viridis_d(name = NULL) +
  scale_x_continuous(name = "Time (days)") +
  scale_y_continuous(name = "VFA Flux mg/ml/day") +
  theme_bw() +
  facet_wrap(~treatment) +
  theme(strip.background = element_blank())
```

Or maybe this is easier to read:

```{r}
ggplot(data = vfa_delta_vfa, aes(x = time_day, colour = treatment)) +
  geom_point(aes(y = flux), alpha = 0.6) +
  geom_errorbar(data = vfa_delta_vfa_summary, 
                aes(ymin = mean_flux - se_flux, 
                    ymax = mean_flux + se_flux), 
                width = 1) +
  geom_errorbar(data = vfa_delta_vfa_summary, 
                aes(ymin = mean_flux, 
                    ymax = mean_flux), 
                width = 0.8) +
  scale_color_viridis_d(name = NULL, begin = 0.2, end = 0.7) +
  scale_x_continuous(name = "Time (days)") +
  scale_y_continuous(name = "VFA Flux mg/ml/day") +
  theme_bw() +
  facet_wrap(~ vfa, nrow = 2) +
  theme(strip.background = element_blank(),
        legend.position = "top")
```


## ph data


Pages made with R [@R-core], Quarto [@allaire2022], `knitr` [@knitr],
`kableExtra` [@kableExtra]

# References
