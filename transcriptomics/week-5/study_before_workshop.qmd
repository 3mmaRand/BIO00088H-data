---
title: "Independent Study to prepare for workshop"
subtitle: "Transcriptomics 3: Visualising"
author: "Emma Rand"
format: 
  revealjs:
    footer: "üîó [About Transcriptomics 3: Visualising](https://3mmarand.github.io/BIO00088H-data/transcriptomics/week-5/overview.html)"
    slide-number: true
    chalkboard: true
    code-link: true
    code-line-numbers: false
bibliography: ../../references.bib
editor: 
  markdown: 
    wrap: 72
---

```{r}
#| include: false
library(tidyverse)

```

## Overview

In these slides we will:

::: incremental
-   Check where you are

-   learn some concepts used omics visualisation

    -   Principle Component Analysis (PCA)
    -   Volcano plots
    -   Heatmaps

-   Find out what packages to install before the workshop
:::

# Where should you be?

## What we did in Transcriptomics 2: Statistical Analysis

::: incremental
-   carried out differential expression analysis

-   found genes not expressed at all, or expressed in one group only

-   Saved results files
:::

## Where should you be?

After the [Transcriptomics 2: üëã Statistical Analysis
Workshop](../week-4/workshop.html) including:

-   [ü§ó Look after future
    you!](../week-4/workshop.html#look-after-future-you) and

-   the [Independent Study to
    consolidate](../week-4/study_after_workshop.html), you should have:

## üê∏ Frogs

::: {style="font-size: 70%;"}
-   An RStudio Project called `frogs-88H` which contains:
    -   Raw data (S14, S20 and S30)
    -   Processed data (`s30_filtered.csv`, `s30_summary_gene.csv`,
        `s30_summary_gene_filtered.csv`, `s30_summary_samp.csv` and
        equivalents for S14 *OR* S20)
    -   Results files (`s30_fgf_only.csv`, `S30_normalised_counts.csv`,
        `S30_results.csv` and equivalents for S14 *OR* S20)\
    -   Two scripts called `cont-fgf-s30.R` and either `cont-fgf-s20.R`
        *OR* `cont-fgf-s14.R`
:::

Files should be organised into folders. Code should well commented and
easy to read.

## üê≠ Mice

::: {style="font-size: 70%;"}
-   An RStudio Project called `mice-88H` which contains
    -   Raw data (hspc, prog, lthsc)
    -   Processed data (`hspc_summary_gene.csv`,
        `hspc_summary_samp.csv`, `prog_summary_gene.csv`,
        `prog_summary_samp.csv`, `lthsc_summary_gene.csv`,
        `lthsc_summary_samp.csv`)
-   Results files (`prog_hspc_results.csv` and an equivalent for lthsc
    vs prog or hspc vs lthsc)
-   Two scripts called `hspc-prog.R` and either `hspc-lthsc.R` *OR*
    `prog-lthsc.R`
:::

Files should be organised into folders. Code should well commented and
easy to read.

## üçÇ

Either of the other examples.

## If you do not have those

Go through:

-   [Transcriptomics 2: Statistical Analysis](../week-4/workshop.html) including:

-   [ü§ó Look after future
    you!](../week-4/workshop.html#look-after-future-you) and

-   the [Independent Study to
    consolidate](../week-4/study_after_workshop.html)

# Examine the results files

## Examine the results files

Remind yourself of the key columns you have in the results files:

-   a log~2~ fold change
-   an unadjusted *p*-value
-   a *p* value adjusted for multiple testing (`FDR` or `padj`)
-   a gene id

## üê∏ Frogs

```{r}
#| echo: false
read_csv("results/S30_results.csv") |> glimpse()

```

. . .

-   `baseMean` is the mean of the normalised counts for the gene across
    all samples
-   `lfcSE` standard error of the fold change
-   `stat` is the test statistic (the Wald statistic)
-   Generated by **`DESeq2`** [@DESeq2]

## üê≠ Mice

```{r}
#| echo: false
read_csv("results/prog_hspc_results.csv") |> glimpse()


```

. . .

-   Top is the rank of the gene ordered by the *p*-value (smallest
    first)
-   `summary.logFC` and `logFC.hspc` give the same value (in this case
    since comparing two cell types)
-   generated by **`scran`** [@scran]


# Plots

## What is the purpose of an Transcriptomics plot?

::: incremental
-   In general, we plot data to help us summarise and understand it

-   This is especially import for omics data where we have a very large
    number of variables and often a large number of observations

-   We will look at three plots very commonly used in omics analysis:
    Principal Component Analysis (PCA) plot, Heatmaps and Volcano Plots
:::

# Principal Component Analysis (PCA)

## PCA

::: incremental
-   Principal Component Analysis is an unsupervised machine learning
    technique

-   Unsupervised methods[^1] are unsupervised in that they do not
    use/optimise to a particular output. The goal is to uncover
    structure. They do not test hypotheses

-   It is often used to visualise high dimensional data because it is a
    dimension reduction technique
:::

[^1]: You may wish to read a previous introduction to unsupervised
    methods I have written [An introduction to Machine Learning:
    Unsupervised
    methods](https://3mmarand.github.io/BIO00058M-Data-science-2020/slides/05_intro_to_ML_unsupervised.html#1)
    [@rand2021]

## PCA

::: incremental
-   It takes a large number of continuous variables (like gene
    expression) and reduces them to a smaller number of variables
    (called principal components) that explain most of the variation in
    the data

-   The principal components can be plotted to see how samples cluster
    together
:::

## PCA
::: {style="font-size: 70%;"}
-   To see if samples cluster as we would expect, we might plot the
    expression of one gene against another

::: {layout-ncol="2"}
![Samples](images/why_pca_frog.png){width="300"}

![Cells](images/why_pca_mouse.png){width="300"}
:::

This gives some insight but we have 280 (mice) or 10,000+(frogs) genes
to consider. How do we know if the pair we use is typical? How can we
consider al the genes at once?

:::

## PCA

::: {style="font-size: 70%;"}
-   PCA is a solution for this - It takes a large number of continuous
    variables (like gene expression) and reduces them to a smaller
    number of "principal components" that explain most of the variation
    in the data.

::: {layout-ncol="2"}

![Samples](figures/frog-s30-pca.png){width="300"}

![Cells](figures/prog_hspc-pca.png){width="300"}
:::


:::
## PCA

We have done PCA in Transcriptomics 3, but often PCA might be one of the first
exploratory steps because it gives you an idea whether you expect
general patterns in gene expression that distinguish groups.

# Heatmaps

## Heatmaps

::: incremental
-   are a grid of genes on one axis and samples on the other with each
    grid cell coloured by another variable

-   in this case the other variable is gene expression

-   they allow you to quickly get an overview of the expression patterns
    across genes and samples

-   we often couple them with clustering to group genes and samples with
    similar expression patterns together which helps us see which genes
    are responsible for distinguishing groups
:::

## 

![Heat map for the frog data](images/frog-heat.png){height="800"}

See next slide for information

## Heatmaps

::: incremental
-   On the vertical axis are genes which are differentially expressed at
    the 0.01 level

-   On the horizontal axis are samples

-   We can see that the FGF-treated samples cluster together and the
    control samples cluster together

-   We can also see two clusters of genes; one of these shows genes
    upregulated (more yellow) in the FGF-treated samples and the other
    shows genes downregulated (more blue) in the FGF-treated samples
:::

# Volcano plots

## Volcano plots

::: incremental
-   Volcano plots often used to visualise the results of differential
    expression analysis

-   They are just a scatter of the corrected p value against the fold
    change....

-   almost - the we actually plot the negative log of the corrected p
    value against the fold change
:::

## Volcano plots

::: {style="font-size: 70%;"}
-   This is because just plotting the *p*-value means the axis is
    counter intuitive. Small *p*-values (i.e., significant values) are
    at the bottom of the axis)

-   And since *p*-values range from 1 to very tiny the points are all
    squashed at the bottom of the axis
:::

![Volcano plot FDR against fold change](images/volcano-why.png)

## Volcano plots

::: {style="font-size: 70%;"}
-   Plotting the negative log of the corrected *p*-value means that the
    values are spread out and the significant values are at the top of
    the axis
:::

![Volcano plot -log(FDR) against fold
change](figures/prog-hspc-volcano.png)

## Visualisations

-   Should be done on normalised data so meaningful comparisons can be
    made

-   The üê≠ mouse data were already log~2~normalised

-   The üê∏ frog data were normalised by the DE method and saved to file.
    We will log~2~ transform before doing visualisations

## Packages to install before the workshop

**`heatmaply`** [@heatmaply] and **`ggrepel`** [@ggrepel] from CRAN in
the the normal way:

```{r}
#| eval: false

install.packages("heatmaply")
install.packages("ggrepel")

```


# Workshops

## Workshops

-   Transcriptomics 1: Hello data Getting to know the data. Checking the
    distributions of values

-   Transcriptomics 2: Statistical Analysis Identifying which genes are
    differentially expressed between treatments.

-   Transcriptomics 3: Visualising and Interpreting. PCA, Volcano plots and
    heatmaps to visualise results. Interpreting the results and finding
    out more about genes of interest.

## References
