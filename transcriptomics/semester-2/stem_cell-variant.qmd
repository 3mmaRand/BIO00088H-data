---
title: "Self study"
subtitle: "Semester 2: Additional üê≠ stem cell labels"
author: "Emma Rand"
toc: true
toc-depth: 4
toc-location: right
execute:
  echo: true
  include: true
  error: true
bibliography: ../../references.bib
editor: 
  markdown: 
    wrap: 72
---

# Introduction

We have analysed the @nestorowa2016 stem cells categorised as LTHSC, HSPC, or
Prog. The cell types were determined from flowcytometry markers. Additional
markers allow the cells to be categorised into 12 other types (including 
unknown): `CMP`, `GMP`, `LMPP`, `LTHSC`, `LTHSC-ESLAM`, `MEP`, 
`MPP_broad`, `MPP1`, `MPP2`, `MPP3`, `STHSC`, `unknown`. These cell types are 
mutually exclusive, meaning that a cell can only be one of these types.

In this self-study, you will:   
-   import all the expression data and gene information for the three cell 
    types
-   import the data that gives the additional labels
-   combine the data and pivot it to have the expression values in a single 
    column
-   plot the expression of one gene, `Emb`, in each cell type for the 3-type 
    categorisation and the 12-type categorisation
-   conduct a PCA on all the data and plot the first two components using 
    colour/shapes for the 12-type categorisation, the 3-type categorisation 
    and the expression of `Emb`.

# Set up

üé¨ Open your `mice-88H` RStudio Project.

üé¨ Save [er_cell_types.csv](data-raw/er_cell_types.csv). 

üé¨ Open a new or existing script

üé¨ Load `tidyverse` [@tidyverse].

```{r}
#| echo: false
library(tidyverse)
```

# Import and combine data

Import the data for the LT-HSC, HSPC and the Progenitor cells. 

üé¨ Import [surfaceome_lthsc.csv](data-raw/surfaceome_lthsc.csv), [surfaceome_hspc.csv](data-raw/surfaceome_hspc.csv) and [surfaceome_hspc.csv](data-raw/surfaceome_prog.csv)

```{r}
# üê≠ import the three datasets
lthsc <- read_csv("data-raw/surfaceome_lthsc.csv")
hspc <- read_csv("data-raw/surfaceome_hspc.csv")
prog <- read_csv("data-raw/surfaceome_prog.csv")
```
```{r}
#| echo: false
# number of columns in each dataset
nlthsc <- ncol(lthsc) - 1
nhspc <- ncol(hspc) - 1
nprog <- ncol(prog) - 1
ntotal <- nlthsc + nhspc + nprog
```


Note there are `r nlthsc` LT-HSC + `r nhspc` HSPC + `r nprog` Progenitor =
`r ntotal` total cells.

We will need to join the three datasets using `ensembl_gene_id` to match the 
rows. 

üé¨ Combine the three datasets by `ensembl_gene_id` and save the result as 
   `cell_expr`.
```{r}
#  combine the three datasets
cell_expr <- hspc |>
  left_join(prog, 
            by = "ensembl_gene_id") |> 
  left_join(lthsc, 
            by = "ensembl_gene_id")
```

You will likely want the gene information in the dataframe along with the 
`ensembl_gene_id`. Rather the connecting again to 
[Ensembl](https://www.ensembl.org/index.html) [@martin2023;
@birney2004] and [BioMart](https://www.ensembl.org/info/data/biomart/index.html)
[@smedley2009] using the R package **`biomaRt`**
[@biomaRt1; @biomaRt2], which means loading more packages, managing conflicts
and using more compute, we can use the information we already have in the
`results/hspc_prog_results.csv` file. This works because there are the same
280 genes in all the raw data and results files.

We need only the `ensembl_gene_id`, (to join the information), the `external_gene_name` and the `description`.

üé¨  Import the gene information from `results/hspc_prog_results.csv` and save as 
   `gene_info`. 

```{r}
# üê≠ import the gene information
gene_info <- read_csv("results/hspc_prog_results.csv") |> 
  select(ensembl_gene_id, external_gene_name, description)
```
üé¨  Join the `gene_info` to the `cell_expr` data.

```{r}
# üê≠ join the gene information to the cell_expr data
cell_expr <- cell_expr |> 
  left_join(gene_info, 
            by = "ensembl_gene_id")
```

The information in the [er_cell_types.csv](data-raw/er_cell_types.csv) has 14 
columns. The first column gives the cell_id (e.g., HSPC_001) the next 12 columns
are named with the cell type or unknown and contain a 0 or 1. These columns 
are useful if you want to compare (plot or DE), for example, CMP vs not CMP. 
The last column gives the cell type which is useful to include all the labels 
in a plot.

üé¨ Import [er_cell_types.csv](data-raw/er_cell_types.csv)

```{r}
# üê≠ import 
cell <- read_csv("data-raw/er_cell_types.csv")

```

üé¨ Check the dataframe has the number of rows and columns you were expecting
   and that column types and names are as expected.

üé¨ Examine the number of cells of each type:
```{r}
cell |> 
  group_by(type) |>
  count()
```


## Expression of a specific gene in each cell type
`
The `cell_expr` data has the expression of each gene in each cell. The 
`cell_ids` are in columns and the gene are in rows. 

We will need to pivot the `cell_expr` data to have the expression values in a 
single column with additional columns giving the cell_id and gene. 

```{r}
# üê≠ pivot the cell_expr data
cell_expr_long <- cell_expr |> 
  pivot_longer(cols = -c(ensembl_gene_id, 
                         external_gene_name, 
                         description),
               names_to = "cell_id", 
               values_to = "expression")
```


We also want to add the two types of categorisation (the 3-type and the 
12-types)to the `cell_expr_long` data. To add the 3-type categorisation we
extract the information in the `cell_id` column into two columns: one with the
cell type and one with the number. We did this before in making
a [PCA plot](../week-5/workshop.html#stem-cells-2)

üé¨ Extract the cell type and cell number from the `cell_id` column 
   (keeping the `cell_id` column):

```{r}
cell_expr_long <- cell_expr_long |> 
  extract(cell_id, 
          remove = FALSE,
          c("cell_type_3", "cell_number"),
          "([a-zA-Z.]{4, 6})_([0-9]{3})")
```

To add the 12-type categorisation we need to join the `cell_expr_long` data to
the `cell` data on the `cell_id`


üé¨ Add the 12-type categorisation to the `cell_expr_long` data.

```{r}
cell_expr_long <- cell_expr_long |> 
  left_join(cell |> select(cell_id, type), 
            by = "cell_id")
```

### Gene expression under 3-type categorisation

I have chosen the gene `Emb` to plot the expression in each cell type. I 
prefer the use of violin plots and points because multimodal distributions
are more obvious than in boxplots

üé¨ Plot the expression of `Emb` in each cell type for the 3-type 
   categorisation.

```{r}
# üê≠ plot the expression of Emb in each cell type
cell_expr_long |> 
  filter(external_gene_name == "Emb") |> 
  ggplot(aes(x = cell_type_3, y = expression)) +
  geom_jitter(width = 0.4, alpha = 0.2, pch = 16) +
  geom_violin(fill = NA, linewidth = 1) +
  theme_classic()
```


### Gene expression under 12-type categorisation

```{r}
# üê≠ plot the expression of Emb in each cell type
cell_expr_long |> 
  filter(external_gene_name == "Emb") |> 
  ggplot(aes(x = type, y = expression)) +
  geom_jitter(width = 0.2, alpha = 0.2, pch = 16) +
  geom_violin(fill = NA, linewidth = 1) +
  theme_classic()
```


Pages made with R [@R-core], Quarto [@Allaire_Quarto_2024], `knitr` [@knitr1; @knitr2; @knitr3], `kableExtra` [@kableExtra]


# References
